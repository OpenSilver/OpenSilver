<UserControl
    x:Class="TestApplication.MainPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:TestApplication"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:interaction="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
    xmlns:sdk = "http://schemas.microsoft.com/winfx/2006/xaml/presentation/sdk" 
    xmlns:tk="clr-namespace:System.Windows.Controls;assembly=System.Windows.Controls.Toolkit"
    mc:Ignorable="d"
    Foreground="Black">
    <UserControl.Resources>
        <local:MyColor x:Key="MyColor"/>

        <Style x:Key="StyleTestForBinding" TargetType="TextBlock">
            <!--SLDISABLED-->
            <!--<Setter Property="Background" Value="Red"/>-->
            <!--<Setter Property="Background" Value="{Binding Path=BackgroundColor, Source={StaticResource MyColor}}"/>-->
        </Style>

        <Storyboard x:Key="TestStoryboard" Duration="0:0:1">
            <ColorAnimation Duration="0:0:1" Storyboard.TargetName="TestBorder" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)"/>
        </Storyboard>
        <Storyboard x:Key="TestStoryboard2" Duration="0:0:1">
            <ColorAnimation Duration="0:0:1" Storyboard.TargetName="TestBorder2" Storyboard.TargetProperty="Background"/>
        </Storyboard>
        <Storyboard x:Key="TestStoryboard3" Duration="0:0:1">
            <ColorAnimation Duration="0:0:1" Storyboard.TargetName="TestButton" Storyboard.TargetProperty="(Control.Background).(SolidColorBrush.Color)"/>
            <ColorAnimation Duration="0:0:1" Storyboard.TargetName="TestButton" Storyboard.TargetProperty="(Control.Foreground).(SolidColorBrush.Color)"/>
        </Storyboard>
        <Storyboard x:Key="TestStoryboard4" Duration="0:0:1">
            <ColorAnimation Duration="0:0:1" Storyboard.TargetName="TestButton2" Storyboard.TargetProperty="Background"/>
            <ColorAnimation Duration="0:0:1" Storyboard.TargetName="TestButton2" Storyboard.TargetProperty="Foreground"/>
        </Storyboard>

        <Style x:Key="TestButtonStyle1" TargetType="Button">
            <Setter Property="Background" Value="LightGray"/>
            <Setter Property="Foreground" Value="Black"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Padding" Value="12,4,12,4"/>
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="FontWeight" Value="SemiBold"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <!-- Supprimer pour l'instant le TargetType -->
                        <Grid>
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup Name="CommonStates">
                                    <VisualState Name="Normal">
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="Border" From="50" To="0" Duration="0:0:1"/>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState Name="PointerOver">
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="Border" From="50" To="100" Duration="0:0:1" RepeatBehavior="Forever"/>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <Border x:Name="Border" CornerRadius="4" Background="{Binding Background, RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{Binding BorderThickness, RelativeSource={RelativeSource TemplatedParent}}" Margin="0">
                                <Border.RenderTransform>
                                    <TranslateTransform X="0" Y="0"/>
                                </Border.RenderTransform>
                                <Grid>
                                    <ContentPresenter x:Name="ContentPresenter" RenderTransform="{TemplateBinding RenderTransform}" ContentTemplate="{Binding ContentTemplate, RelativeSource={RelativeSource TemplatedParent}}" Content="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}" Margin="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}}"/>
                                </Grid>
                            </Border>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="TestButtonStyle2" TargetType="Button">
            <Setter Property="Background" Value="LightGray"/>
            <Setter Property="Foreground" Value="Black"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Padding" Value="12,4,12,4"/>
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="FontWeight" Value="SemiBold"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <!-- Supprimer pour l'instant le TargetType -->
                        <Grid>
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup Name="CommonStates">
                                    <VisualState Name="Normal">
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="Border" To="0" Duration="0:0:1">
                                                <DoubleAnimation.EasingFunction>
                                                    <CircleEase EasingMode="EaseIn"/>
                                                </DoubleAnimation.EasingFunction>
                                            </DoubleAnimation>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState Name="PointerOver">
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="Border" To="100" Duration="0:0:1">
                                                <DoubleAnimation.EasingFunction>
                                                    <CircleEase/>
                                                </DoubleAnimation.EasingFunction>
                                            </DoubleAnimation>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <Border x:Name="Border" CornerRadius="4" Background="{Binding Background, RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{Binding BorderThickness, RelativeSource={RelativeSource TemplatedParent}}" Margin="0">
                                <Border.RenderTransform>
                                    <TranslateTransform X="0" Y="0"/>
                                </Border.RenderTransform>
                                <Grid>
                                    <ContentPresenter x:Name="ContentPresenter" RenderTransform="{TemplateBinding RenderTransform}" ContentTemplate="{Binding ContentTemplate, RelativeSource={RelativeSource TemplatedParent}}" Content="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}" Margin="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}}"/>
                                </Grid>
                            </Border>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="TestButtonStyle3" TargetType="Button">
            <Setter Property="Background" Value="LightGray"/>
            <Setter Property="Foreground" Value="Black"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Padding" Value="12,4,12,4"/>
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="FontWeight" Value="SemiBold"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <!-- Supprimer pour l'instant le TargetType -->
                        <Grid>
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup Name="CommonStates">
                                    <VisualState Name="Normal">
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="Border" To="0" Duration="0:0:1">
                                                <DoubleAnimation.EasingFunction>
                                                    <CubicEase EasingMode="EaseIn"/>
                                                </DoubleAnimation.EasingFunction>
                                            </DoubleAnimation>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState Name="PointerOver">
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="Border" To="100" Duration="0:0:1">
                                                <DoubleAnimation.EasingFunction>
                                                    <CubicEase/>
                                                </DoubleAnimation.EasingFunction>
                                            </DoubleAnimation>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <Border x:Name="Border" CornerRadius="4" Background="{Binding Background, RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{Binding BorderThickness, RelativeSource={RelativeSource TemplatedParent}}" Margin="0">
                                <Border.RenderTransform>
                                    <TranslateTransform X="0" Y="0"/>
                                </Border.RenderTransform>
                                <Grid>
                                    <ContentPresenter x:Name="ContentPresenter" RenderTransform="{TemplateBinding RenderTransform}" ContentTemplate="{Binding ContentTemplate, RelativeSource={RelativeSource TemplatedParent}}" Content="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}" Margin="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}}"/>
                                </Grid>
                            </Border>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="TestButtonStyle4" TargetType="Button">
            <Setter Property="Background" Value="LightGray"/>
            <Setter Property="Foreground" Value="Black"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Padding" Value="12,4,12,4"/>
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="FontWeight" Value="SemiBold"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <!-- Supprimer pour l'instant le TargetType -->
                        <Grid>
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup Name="CommonStates">
                                    <VisualState Name="Normal">
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="Border" To="0" Duration="0:0:1">
                                                <DoubleAnimation.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseIn"/>
                                                </DoubleAnimation.EasingFunction>
                                            </DoubleAnimation>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState Name="PointerOver">
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="Border" To="100" Duration="0:0:1">
                                                <DoubleAnimation.EasingFunction>
                                                    <ExponentialEase EasingMode="EaseInOut"/>
                                                </DoubleAnimation.EasingFunction>
                                            </DoubleAnimation>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <Border x:Name="Border" CornerRadius="4" Background="{Binding Background, RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{Binding BorderThickness, RelativeSource={RelativeSource TemplatedParent}}" Margin="0">
                                <Border.RenderTransform>
                                    <TranslateTransform X="0" Y="0"/>
                                </Border.RenderTransform>
                                <Grid>
                                    <ContentPresenter x:Name="ContentPresenter" RenderTransform="{TemplateBinding RenderTransform}" ContentTemplate="{Binding ContentTemplate, RelativeSource={RelativeSource TemplatedParent}}" Content="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}" Margin="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}}"/>
                                </Grid>
                            </Border>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="TestButtonStyle5" TargetType="Button">
            <Setter Property="Background" Value="LightGray"/>
            <Setter Property="Foreground" Value="Black"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Padding" Value="12,4,12,4"/>
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="FontWeight" Value="SemiBold"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <!-- Supprimer pour l'instant le TargetType -->
                        <Grid>
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup Name="CommonStates">
                                    <VisualState Name="Normal">
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="Border" To="0" Duration="0:0:1">
                                                <DoubleAnimation.EasingFunction>
                                                    <QuadraticEase EasingMode="EaseIn"/>
                                                </DoubleAnimation.EasingFunction>
                                            </DoubleAnimation>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState Name="PointerOver">
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="Border" To="100" Duration="0:0:1">
                                                <DoubleAnimation.EasingFunction>
                                                    <QuadraticEase/>
                                                </DoubleAnimation.EasingFunction>
                                            </DoubleAnimation>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <Border x:Name="Border" CornerRadius="4" Background="{Binding Background, RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{Binding BorderThickness, RelativeSource={RelativeSource TemplatedParent}}" Margin="0">
                                <Border.RenderTransform>
                                    <TranslateTransform X="0" Y="0"/>
                                </Border.RenderTransform>
                                <Grid>
                                    <ContentPresenter x:Name="ContentPresenter" RenderTransform="{TemplateBinding RenderTransform}" ContentTemplate="{Binding ContentTemplate, RelativeSource={RelativeSource TemplatedParent}}" Content="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}" Margin="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}}"/>
                                </Grid>
                            </Border>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="TestButtonStyle6" TargetType="Button">
            <Setter Property="Background" Value="LightGray"/>
            <Setter Property="Foreground" Value="Black"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Padding" Value="12,4,12,4"/>
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="FontWeight" Value="SemiBold"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <!-- Supprimer pour l'instant le TargetType -->
                        <Grid>
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup Name="CommonStates">
                                    <VisualState Name="Normal">
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="Border" To="0" Duration="0:0:1">
                                                <DoubleAnimation.EasingFunction>
                                                    <QuarticEase EasingMode="EaseIn"/>
                                                </DoubleAnimation.EasingFunction>
                                            </DoubleAnimation>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState Name="PointerOver">
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="Border" To="100" Duration="0:0:1">
                                                <DoubleAnimation.EasingFunction>
                                                    <QuarticEase/>
                                                </DoubleAnimation.EasingFunction>
                                            </DoubleAnimation>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <Border x:Name="Border" CornerRadius="4" Background="{Binding Background, RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{Binding BorderThickness, RelativeSource={RelativeSource TemplatedParent}}" Margin="0">
                                <Border.RenderTransform>
                                    <TranslateTransform X="0" Y="0"/>
                                </Border.RenderTransform>
                                <Grid>
                                    <ContentPresenter x:Name="ContentPresenter" RenderTransform="{TemplateBinding RenderTransform}" ContentTemplate="{Binding ContentTemplate, RelativeSource={RelativeSource TemplatedParent}}" Content="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}" Margin="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}}"/>
                                </Grid>
                            </Border>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="TestButtonStyle7" TargetType="Button">
            <Setter Property="Background" Value="LightGray"/>
            <Setter Property="Foreground" Value="Black"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Padding" Value="12,4,12,4"/>
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="FontWeight" Value="SemiBold"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <!-- Supprimer pour l'instant le TargetType -->
                        <Grid>
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup Name="CommonStates">
                                    <VisualState Name="Normal">
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="Border" To="0" Duration="0:0:1">
                                                <DoubleAnimation.EasingFunction>
                                                    <QuinticEase EasingMode="EaseIn"/>
                                                </DoubleAnimation.EasingFunction>
                                            </DoubleAnimation>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState Name="PointerOver">
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="Border" To="100" Duration="0:0:1">
                                                <DoubleAnimation.EasingFunction>
                                                    <QuinticEase/>
                                                </DoubleAnimation.EasingFunction>
                                            </DoubleAnimation>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <Border x:Name="Border" CornerRadius="4" Background="{Binding Background, RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{Binding BorderThickness, RelativeSource={RelativeSource TemplatedParent}}" Margin="0">
                                <Border.RenderTransform>
                                    <TranslateTransform X="0" Y="0"/>
                                </Border.RenderTransform>
                                <Grid>
                                    <ContentPresenter x:Name="ContentPresenter" RenderTransform="{TemplateBinding RenderTransform}" ContentTemplate="{Binding ContentTemplate, RelativeSource={RelativeSource TemplatedParent}}" Content="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}" Margin="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}}"/>
                                </Grid>
                            </Border>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="TestButtonStyle8" TargetType="Button">
            <Setter Property="Background" Value="LightGray"/>
            <Setter Property="Foreground" Value="Black"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Padding" Value="12,4,12,4"/>
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="FontWeight" Value="SemiBold"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <!-- Supprimer pour l'instant le TargetType -->
                        <Grid>
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup Name="CommonStates">
                                    <VisualState Name="Normal">
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="Border" To="0" Duration="0:0:1">
                                                <DoubleAnimation.EasingFunction>
                                                    <SineEase EasingMode="EaseIn"/>
                                                </DoubleAnimation.EasingFunction>
                                            </DoubleAnimation>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState Name="PointerOver">
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="Border" To="100" Duration="0:0:1">
                                                <DoubleAnimation.EasingFunction>
                                                    <SineEase/>
                                                </DoubleAnimation.EasingFunction>
                                            </DoubleAnimation>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <Border x:Name="Border" CornerRadius="4" Background="{Binding Background, RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{Binding BorderThickness, RelativeSource={RelativeSource TemplatedParent}}" Margin="0">
                                <Border.RenderTransform>
                                    <TranslateTransform X="0" Y="0"/>
                                </Border.RenderTransform>
                                <Grid>
                                    <ContentPresenter x:Name="ContentPresenter" RenderTransform="{TemplateBinding RenderTransform}" ContentTemplate="{Binding ContentTemplate, RelativeSource={RelativeSource TemplatedParent}}" Content="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}" Margin="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}}"/>
                                </Grid>
                            </Border>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="TestButtonStyle9" TargetType="Button">
            <Setter Property="Background" Value="LightGray"/>
            <Setter Property="Foreground" Value="Black"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Padding" Value="12,4,12,4"/>
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="FontWeight" Value="SemiBold"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <!-- Supprimer pour l'instant le TargetType -->
                        <Grid>
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup Name="CommonStates">
                                    <VisualState Name="Normal">
                                    </VisualState>
                                    <VisualState Name="PointerOver">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" Storyboard.TargetName="Border">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="LightBlue"/>
                                            </ObjectAnimationUsingKeyFrames>
                                            <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.Rotation)" Storyboard.TargetName="Border" To="360" Duration="0:0:1">
                                                <DoubleAnimation.EasingFunction>
                                                    <CubicEase EasingMode="EaseInOut"/>
                                                </DoubleAnimation.EasingFunction>
                                            </DoubleAnimation>
                                            <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.TranslateX)" Storyboard.TargetName="Border" To="200" Duration="0:0:1">
                                                <DoubleAnimation.EasingFunction>
                                                    <CubicEase EasingMode="EaseInOut"/>
                                                </DoubleAnimation.EasingFunction>
                                            </DoubleAnimation>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <Border x:Name="Border" CornerRadius="4" RenderTransformOrigin="0,0" Background="{Binding Background, RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{Binding BorderThickness, RelativeSource={RelativeSource TemplatedParent}}" Margin="0">
                                <Border.RenderTransform>
                                    <CompositeTransform/>
                                </Border.RenderTransform>
                                <Grid>
                                    <ContentPresenter x:Name="ContentPresenter" ContentTemplate="{Binding ContentTemplate, RelativeSource={RelativeSource TemplatedParent}}" Content="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}" Margin="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}}"/>
                                </Grid>
                            </Border>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="TestObjectAnimationUsingKeyFramesStyle1" TargetType="Button">
            <Setter Property="Background" Value="LightGray"/>
            <Setter Property="Foreground" Value="Black"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Padding" Value="12,4,12,4"/>
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="FontWeight" Value="SemiBold"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <!-- Supprimer pour l'instant le TargetType -->
                        <Grid>
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup Name="CommonStates">
                                    <VisualState Name="Normal">
                                    </VisualState>
                                    <VisualState Name="PointerOver">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" Storyboard.TargetName="Border">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="Green"/>
                                                <DiscreteObjectKeyFrame KeyTime="0:0:0.3" Value="Orange"/>
                                                <DiscreteObjectKeyFrame KeyTime="0:0:0.6" Value="Yellow"/>
                                                <DiscreteObjectKeyFrame KeyTime="0:0:1" Value="LightBlue"/>
                                            </ObjectAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState Name="Pressed">
                                    </VisualState>
                                    <VisualState Name="Disabled">
                                    </VisualState>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <Border x:Name="Border" CornerRadius="4" Background="{Binding Background, RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{Binding BorderThickness, RelativeSource={RelativeSource TemplatedParent}}" Margin="0">
                                <Grid>
                                    <ContentPresenter x:Name="ContentPresenter" ContentTemplate="{Binding ContentTemplate, RelativeSource={RelativeSource TemplatedParent}}" Content="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}" Margin="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}}"/>
                                </Grid>
                            </Border>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="TextBoxStyle1" TargetType="TextBox">
            <!--<Setter Property="Background" Value="#FFE2E2E2"/>
            <Setter Property="Foreground" Value="Black"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Padding" Value="0"/>
            <Setter Property="Cursor" Value="Hand"/>-->
            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
            <Setter Property="VerticalContentAlignment" Value="Stretch"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="TextBox">
                        <Border x:Name="OuterBorder"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Padding="4"
                                CornerRadius="15">
                            <!--<VisualStateManager.VisualStateGroups>
                                <VisualStateGroup Name="FocusStates">
                                    <VisualState Name="UnFocused">
                                    </VisualState>
                                    <VisualState Name="Focused">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Background" Storyboard.TargetName="OuterBorder">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="#11000000"/>
                                            </ObjectAnimationUsingKeyFrames>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Background" Storyboard.TargetName="ContentElement">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="#11000000"/>
                                            </ObjectAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>-->
                            <ContentPresenter x:Name="ContentElement"
                                                  Margin="{TemplateBinding Padding}"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

    </UserControl.Resources>
    <!--xmlns:test="clr-namespace:ToDoCalendarControl.Html;assembly=ToDoCalendarControl.Html"-->
    <ScrollViewer VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled">
        <StackPanel Orientation="Vertical" Background="White">
            <TextBlock Text="Testing WINDOW RESIZE:" Margin="0,10,0,0"/>
            <StackPanel Orientation="Horizontal">
                <TextBlock Text=" - Width: "/>
                <TextBlock x:Name="WindowWidthTextBlock" Text="?"/>
                <TextBlock Text=" - Height: "/>
                <TextBlock x:Name="WindowHeightTextBlock" Text="?"/>
            </StackPanel>
            <TextBlock Text="Testing CheckBox indeterminate:" Margin="0,10,0,0"/>
            <CheckBox x:Name="TestIndeterminateCheckBox1" IsThreeState="False" Content="Without Indeterminate mode"/>
            <TextBlock Text="{Binding ElementName=TestIndeterminateCheckBox1, Path=IsChecked, TargetNullValue=NULL}"/>
            <CheckBox x:Name="TestIndeterminateCheckBox2" IsThreeState="True" Content="With Indeterminate mode"/>
            <TextBlock Text="{Binding ElementName=TestIndeterminateCheckBox2, Path=IsChecked, TargetNullValue=NULL}"/>
            <TextBlock Text="Testing Double Click:" Margin="0,10,0,0"/>
            <!-- <Border Background="Green" Width="50" Height="50" PointerPressed="TestDoubleClick_PointerPressed"/> -->
            <Border Background="Green" Width="50" Height="50" MouseLeftButtonDown="TestDoubleClick_PointerPressed"/>
            <TextBlock Text="Testing TOOLTIPS:" Margin="0,10,0,0"/>
            <Button Content="Button with text ToolTip inline" HorizontalAlignment="Center" 
                    ToolTipService.ToolTip="This is the ToolTip" />
            <Button Content="Button with image ToolTip as direct child" HorizontalAlignment="Center" >
                <ToolTipService.ToolTip>
                    <Image Source="ms-appx:/Images/Logo1.png" Width="100" Height="100" Stretch="Fill"/>
                </ToolTipService.ToolTip>
            </Button>
            <Button Content="Button with image ToolTip normal" HorizontalAlignment="Center" >
                <ToolTipService.ToolTip>
                    <ToolTip>
                        <Image Source="ms-appx:/Images/Logo1.png" Width="100" Height="100" Stretch="Fill"/>
                    </ToolTip>
                </ToolTipService.ToolTip>
            </Button>
            <!--<ListBox Width="100">
                <ListBoxItem Content="Left" 
                    ToolTipService.ToolTip="ToolTip to the left." 
                    ToolTipService.Placement="Left" />
                <ListBoxItem Content="Right" 
                    ToolTipService.ToolTip="ToolTip to the right." 
                    ToolTipService.Placement="Right" />
                <ListBoxItem Content="Top" 
                    ToolTipService.ToolTip="ToolTip at the top." 
                    ToolTipService.Placement="Top" />
                <ListBoxItem Content="Bottom" 
                    ToolTipService.ToolTip="ToolTip at the bottom." 
                    ToolTipService.Placement="Bottom" />
                <ListBoxItem Content="Mouse" 
                    ToolTipService.ToolTip="ToolTip based on the cursor position." 
                    ToolTipService.Placement="Mouse" />
            </ListBox>-->
            <TextBlock Text="Testing RIGHT-CLICK:" Margin="0,10,0,0"/>
            <!-- <Border CornerRadius="5" Background="LightGray" Padding="10" HorizontalAlignment="Center" RightTapped="BorderToTestRightClick_RightTapped"> -->
                <Border CornerRadius="5" Background="LightGray" Padding="10" HorizontalAlignment="Center" MouseRightButtonUp="BorderToTestRightClick_RightTapped">
                <TextBlock Text="Right-click to display msg box."/>
            </Border>
            <TextBlock Text="Testing CONTEXT MENU:" Margin="0,10,0,0"/>
            <!--SLDISABLED-->
            <!--<Border CornerRadius="5" Background="LightGray" Padding="10" HorizontalAlignment="Center">
                <Border.ContextMenu>
                    <ContextMenu>
                        <MenuItem Content="Menu Item 1" Click="MenuItem1_Click"/>
                        <MenuItem Content="Menu Item 2" Click="MenuItem2_Click"/>
                        <MenuItem Content="Menu Item 3" Click="MenuItem3_Click"/>
                    </ContextMenu>
                </Border.ContextMenu>
                <TextBlock Text="Right-click to display menu without icons."/>
            </Border>
            <Border CornerRadius="5" Background="LightGray" Padding="10" HorizontalAlignment="Center">
                <Border.ContextMenu>
                    <ContextMenu>
                        <MenuItem Content="Menu Item 1" Click="MenuItem1_Click">
                            <MenuItem.Icon>
                                <Image Source="ms-appx:/Images/Logo1.png" Width="20" Height="20" Stretch="Fill"/>
                            </MenuItem.Icon>
                        </MenuItem>
                        <MenuItem Content="Menu Item 2" Click="MenuItem2_Click">
                            <MenuItem.Icon>
                                <Image Source="ms-appx:/Images/Logo1.png" Width="20" Height="20" Stretch="Fill"/>
                            </MenuItem.Icon>
                        </MenuItem>
                        <MenuItem Content="Menu Item 3 (longer name)" Click="MenuItem3_Click">
                            <MenuItem.Icon>
                                <Image Source="ms-appx:/Images/Logo1.png" Width="20" Height="20" Stretch="Fill"/>
                            </MenuItem.Icon>
                        </MenuItem>
                    </ContextMenu>
                </Border.ContextMenu>
                <TextBlock Text="Right-click to display menu with icons."/>
            </Border>-->
            
            <TextBlock Text="Testing DateTime:" Margin="0,10,0,0"/>
            <Button Content="Click to test with date 01/02/2014 at 15:16:17 (Unspecified kind)" Click="ButtonTestDateTime1_Click" HorizontalAlignment="Center"/>
            <Button Content="Click to test with date 01/02/2014 at 15:16:17 (Local)" Click="ButtonTestDateTime2_Click" HorizontalAlignment="Center"/>
            <Button Content="Click to test with date 01/02/2014 at 15:16:17 (UTC)" Click="ButtonTestDateTime3_Click" HorizontalAlignment="Center"/>
            <Button Content="Click to test with current date" Click="ButtonTestDateTime4_Click" HorizontalAlignment="Center"/>
            <Button Content="Click to test with current date UTC" Click="ButtonTestDateTime5_Click" HorizontalAlignment="Center"/>
            <TextBlock Text="Testing ComboBox, ListBox, AutoCompleteBox:" Margin="0,10,0,0"/>
            <sdk:TabControl>
                <sdk:TabItem Header="Click me to see the tests">
                    <sdk:TabItem.Content>
                        <StackPanel Orientation="Vertical" Margin="0,10,0,0">
                            <TextBlock Text="ITEMSCONTROL:"/>
                            <ItemsControl x:Name="ItemsControl1" Width="100"/>
                            <TextBlock Text="LISTBOX:"/>
                            <ListBox x:Name="ListBox1" Width="100">
                                <ListBox.ItemTemplate>
                                    <DataTemplate>
                                        <StackPanel>
                                            <TextBlock Text="Item: "/>
                                            <TextBlock Text="{Binding}"/>
                                        </StackPanel>
                                    </DataTemplate>
                                </ListBox.ItemTemplate>
                                <ListBox.Template>
                                    <ControlTemplate TargetType="ListBox">
                                        <Border BorderThickness="2" BorderBrush="Red">
                                            <ItemsPresenter/>
                                        </Border>
                                    </ControlTemplate>
                                </ListBox.Template>
                            </ListBox>
                            <Button Content="Items.Add" Click="ButtonTestListBox_ItemsAdd_Click"/>
                            <Button Content="Items.Clear" Click="ButtonTestListBox_ItemsClear_Click"/>
                            <Button Content="Items.Remove First" Click="ButtonTestListBox_ItemsRemoveFirst_Click"/>
                            <Button Content="Set new ItemsSource" Click="ButtonTestListBox_SetNewItemsSource_Click"/>
                            <Button Content="ItemsSource.Add" Click="ButtonTestListBox_ItemsSourceAdd_Click"/>
                            <Button Content="ItemsSource.Clear" Click="ButtonTestListBox_ItemsSourceClear_Click"/>
                            <Button Content="ItemsSource.Remove first" Click="ButtonTestListBox_ItemsSourceRemove_Click"/>
                            <Button Content="Set ItemsSource to null" Click="ButtonTestListBox_SetItemsSourceToNull_Click"/>
                            <Button Content="Select second item" Click="ButtonTestListBox_SelectSecondItem_Click"/>
                            <Button Content="Select second index" Click="ButtonTestListBox_SelectSecondIndex_Click"/>
                            <Button Content="SelectedItem=null" Click="ButtonTestListBox_SelectItemNull_Click"/>
                            <Button Content="SelectedIndex=-1" Click="ButtonTestListBox_SelectedIndexMinusOne_Click"/>
                            <StackPanel Orientation="Horizontal">
                                <TextBlock Text="SelectedIndex:"/>
                                <TextBlock Margin="5,0,0,0" Text="{Binding ElementName=ListBox1, Path=SelectedIndex}"/>
                            </StackPanel>
                            <StackPanel Orientation="Horizontal">
                                <TextBlock Text="SelectedItem:"/>
                                <TextBlock Margin="5,0,0,0" Text="{Binding ElementName=ListBox1, Path=SelectedItem}"/>
                            </StackPanel>
                            <TextBlock Text="COMBOBOX NATIVE:"/>
                            <ComboBox x:Name="ComboBox1" Width="150"/>
                            <Button Content="Items.Add" Click="ButtonTestComboBox_ItemsAdd_Click"/>
                            <Button Content="Items.Add String" Click="ButtonTestComboBox_ItemsAddString_Click"/>
                            <Button Content="Items.Clear" Click="ButtonTestComboBox_ItemsClear_Click"/>
                            <Button Content="Items.Remove First" Click="ButtonTestComboBox_ItemsRemoveFirst_Click"/>
                            <Button Content="Set new ItemsSource" Click="ButtonTestComboBox_SetNewItemsSource_Click"/>
                            <Button Content="ItemsSource.Add" Click="ButtonTestComboBox_ItemsSourceAdd_Click"/>
                            <Button Content="ItemsSource.Clear" Click="ButtonTestComboBox_ItemsSourceClear_Click"/>
                            <Button Content="ItemsSource.Remove first" Click="ButtonTestComboBox_ItemsSourceRemove_Click"/>
                            <Button Content="Set ItemsSource to null" Click="ButtonTestComboBox_SetItemsSourceToNull_Click"/>
                            <Button Content="Select second item" Click="ButtonTestComboBox_SelectSecondItem_Click"/>
                            <Button Content="Select second index" Click="ButtonTestComboBox_SelectSecondIndex_Click"/>
                            <Button Content="SelectedItem=null" Click="ButtonTestComboBox_SelectItemNull_Click"/>
                            <Button Content="SelectedIndex=-1" Click="ButtonTestComboBox_SelectedIndexMinusOne_Click"/>
                            <StackPanel Orientation="Horizontal">
                                <TextBlock Text="SelectedIndex:"/>
                                <TextBlock Margin="5,0,0,0" Text="{Binding ElementName=ComboBox1, Path=SelectedIndex}"/>
                            </StackPanel>
                            <StackPanel Orientation="Horizontal">
                                <TextBlock Text="SelectedItem:"/>
                                <TextBlock Margin="5,0,0,0" Text="{Binding ElementName=ComboBox1, Path=SelectedItem}"/>
                            </StackPanel>
                            <TextBlock Text="COMBOBOX NON NATIVE:"/>
                            <!--SLDISABLED-->
                            <!--<ComboBox x:Name="ComboBoxNonNative" Width="250" UseNativeComboBox="False"/>
                            <Button Content="Items.Add UI element" Click="ButtonTestComboBoxNonNative_ItemsAddUIElement_Click"/>
                            <Button Content="Items.Add string" Click="ButtonTestComboBoxNonNative_ItemsAddString_Click"/>
                            <Button Content="Items.Add" Click="ButtonTestComboBoxNonNative_ItemsAdd_Click"/>
                            <Button Content="Items.Clear" Click="ButtonTestComboBoxNonNative_ItemsClear_Click"/>
                            <Button Content="Items.Remove First" Click="ButtonTestComboBoxNonNative_ItemsRemoveFirst_Click"/>
                            <Button Content="Set new ItemsSource" Click="ButtonTestComboBoxNonNative_SetNewItemsSource_Click"/>
                            <Button Content="ItemsSource.Add" Click="ButtonTestComboBoxNonNative_ItemsSourceAdd_Click"/>
                            <Button Content="ItemsSource.Clear" Click="ButtonTestComboBoxNonNative_ItemsSourceClear_Click"/>
                            <Button Content="ItemsSource.Remove first" Click="ButtonTestComboBoxNonNative_ItemsSourceRemove_Click"/>
                            <Button Content="Set ItemsSource to null" Click="ButtonTestComboBoxNonNative_SetItemsSourceToNull_Click"/>
                            <Button Content="Select second item" Click="ButtonTestComboBoxNonNative_SelectSecondItem_Click"/>
                            <Button Content="Select second index" Click="ButtonTestComboBoxNonNative_SelectSecondIndex_Click"/>
                            <Button Content="SelectedItem=null" Click="ButtonTestComboBoxNonNative_SelectItemNull_Click"/>
                            <Button Content="SelectedIndex=-1" Click="ButtonTestComboBoxNonNative_SelectedIndexMinusOne_Click"/>
                            <StackPanel Orientation="Horizontal">
                                <TextBlock Text="SelectedIndex:"/>
                                <TextBlock Margin="5,0,0,0" Text="{Binding ElementName=ComboBoxNonNative, Path=SelectedIndex}"/>
                            </StackPanel>
                            <StackPanel Orientation="Horizontal">
                                <TextBlock Text="SelectedItem:"/>
                                <TextBlock Margin="5,0,0,0" Text="{Binding ElementName=ComboBoxNonNative, Path=SelectedItem}"/>
                            </StackPanel>-->
                            
                            <TextBlock Text="AUTOCOMPLETEBOX:"/>
                            <!--SLDISABLED-->
                            <!--<AutoCompleteBox x:Name="AutoCompleteBox1" Width="250"/>
                            <Button Content="Items.Add UI element" Click="ButtonTestAutoCompleteBox1_ItemsAddUIElement_Click"/>
                            <Button Content="Items.Add string" Click="ButtonTestAutoCompleteBox1_ItemsAddString_Click"/>
                            <Button Content="Items.Add" Click="ButtonTestAutoCompleteBox1_ItemsAdd_Click"/>
                            <Button Content="Items.Clear" Click="ButtonTestAutoCompleteBox1_ItemsClear_Click"/>
                            <Button Content="Items.Remove First" Click="ButtonTestAutoCompleteBox1_ItemsRemoveFirst_Click"/>
                            <Button Content="Set new ItemsSource" Click="ButtonTestAutoCompleteBox1_SetNewItemsSource_Click"/>
                            <Button Content="ItemsSource.Add" Click="ButtonTestAutoCompleteBox1_ItemsSourceAdd_Click"/>
                            <Button Content="ItemsSource.Clear" Click="ButtonTestAutoCompleteBox1_ItemsSourceClear_Click"/>
                            <Button Content="ItemsSource.Remove first" Click="ButtonTestAutoCompleteBox1_ItemsSourceRemove_Click"/>
                            <Button Content="Set ItemsSource to null" Click="ButtonTestAutoCompleteBox1_SetItemsSourceToNull_Click"/>
                            <Button Content="Select second item" Click="ButtonTestAutoCompleteBox1_SelectSecondItem_Click"/>
                            <Button Content="Select second index" Click="ButtonTestAutoCompleteBox1_SelectSecondIndex_Click"/>
                            <Button Content="SelectedItem=null" Click="ButtonTestAutoCompleteBox1_SelectItemNull_Click"/>
                            <Button Content="SelectedIndex=-1" Click="ButtonTestAutoCompleteBox1_SelectedIndexMinusOne_Click"/>
                            <StackPanel Orientation="Horizontal">
                                <TextBlock Text="SelectedIndex:"/>
                                <TextBlock Margin="5,0,0,0" Text="{Binding ElementName=AutoCompleteBox1, Path=SelectedIndex}"/>
                            </StackPanel>
                            <StackPanel Orientation="Horizontal">
                                <TextBlock Text="SelectedItem:"/>
                                <TextBlock Margin="5,0,0,0" Text="{Binding ElementName=AutoCompleteBox1, Path=SelectedItem}"/>
                            </StackPanel>-->
                            
                            <!--<TextBlock Text="DATAGRID:"/>
                            <DataGrid x:Name="DataGrid1" Width="150"/>
                            <Button Content="Items.Add" Click="ButtonTestDataGrid_ItemsAdd_Click"/>
                            <Button Content="Items.Add String" Click="ButtonTestDataGrid_ItemsAddString_Click"/>
                            <Button Content="Items.Clear" Click="ButtonTestDataGrid_ItemsClear_Click"/>
                            <Button Content="Items.Remove First" Click="ButtonTestDataGrid_ItemsRemoveFirst_Click"/>
                            <Button Content="Set new ItemsSource" Click="ButtonTestDataGrid_SetNewItemsSource_Click"/>
                            <Button Content="ItemsSource.Add" Click="ButtonTestDataGrid_ItemsSourceAdd_Click"/>
                            <Button Content="ItemsSource.Clear" Click="ButtonTestDataGrid_ItemsSourceClear_Click"/>
                            <Button Content="ItemsSource.Remove first" Click="ButtonTestDataGrid_ItemsSourceRemove_Click"/>
                            <Button Content="Set ItemsSource to null" Click="ButtonTestDataGrid_SetItemsSourceToNull_Click"/>
                            <Button Content="Select second item" Click="ButtonTestDataGrid_SelectSecondItem_Click"/>
                            <Button Content="Select second index" Click="ButtonTestDataGrid_SelectSecondIndex_Click"/>
                            <Button Content="SelectedItem=null" Click="ButtonTestDataGrid_SelectItemNull_Click"/>
                            <Button Content="SelectedIndex=-1" Click="ButtonTestDataGrid_SelectedIndexMinusOne_Click"/>
                            <StackPanel Orientation="Horizontal">
                                <TextBlock Text="SelectedIndex:"/>
                                <TextBlock Margin="5,0,0,0" Text="{Binding ElementName=DataGrid1, Path=SelectedIndex}"/>
                            </StackPanel>
                            <StackPanel Orientation="Horizontal">
                                <TextBlock Text="SelectedItem:"/>
                                <TextBlock Margin="5,0,0,0" Text="{Binding ElementName=DataGrid1, Path=SelectedItem}"/>
                            </StackPanel>-->
                        </StackPanel>
                    </sdk:TabItem.Content>
                </sdk:TabItem>
                <sdk:TabItem Header="Second Tab">
                    <TextBlock Text="Tab 2"/>
                </sdk:TabItem>
            </sdk:TabControl>
            <!-- Testing negative margins -->
            <TextBlock Text="Testing NEGATIVE MARGINS:" Margin="0,10,0,0"/>
            <TextBlock Text="Margin='-11,12,13,14'"/>
            <Border Background="Red" Width="100" Height="100">
                <Border Background="Blue" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="-11,12,13,14">
                    <TextBlock Text="UpperLeft"/>
                </Border>
            </Border>
            <TextBlock Text="Margin='11,-12,13,14'"/>
            <Border Background="Red" Width="100" Height="100">
                <Border Background="Blue" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="11,-12,13,14">
                    <TextBlock Text="UpperLeft"/>
                </Border>
            </Border>
            <TextBlock Text="Margin='11,12,-13,14'"/>
            <Border Background="Red" Width="100" Height="100">
                <Border Background="Blue" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="11,12,-13,14">
                    <TextBlock Text="UpperLeft"/>
                </Border>
            </Border>
            <TextBlock Text="Margin='11,12,13,-14'"/>
            <Border Background="Red" Width="100" Height="100">
                <Border Background="Blue" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="11,12,13,-14">
                    <TextBlock Text="UpperLeft"/>
                </Border>
            </Border>
            <!-- Testing linq -->
            <TextBlock Text="Testing LINQ:" Margin="0,10,0,0"/>
            <Button Background="#DDDDDD" Click="TestButtonLinq_Click" Content="Click to test Linq (look at output pane or console output)" HorizontalAlignment="Left"/>
            <TextBlock Text="Below is an example of GroupBy with a list of elements from 2 to 6 grouped with a test checking whether they are above 3 or not:" Margin="0,10,0,0"/>
            <StackPanel x:Name="GroupByStackPanel" Orientation="Horizontal" Margin="5"/>

            <!-- Testing IsHitTestVisible and Opacity -->
            <TextBlock Text="Testing IsHitTestVisible:" Margin="0,10,0,0"/>
            <!--SLDISABLED-->
            <!--<Grid Width="200" Height="80" ClipToBounds="True">-->
            <Grid Width="200" Height="80">
                <Button Content="This button is under an overlay" Click="TestButtonUnderOverlay_Click"/>
                <Rectangle Fill="Red" Opacity="0.3" IsHitTestVisible="False"/>
            </Grid>
            <!-- Testing ChildWindow -->
            <TextBlock Text="Testing ChildWindow:" Margin="0,10,0,0"/>
            <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" VerticalAlignment="Top">
                <Button Content="Show Login Child Window" Click="ButtonTestChildWindow_Click"/>
                <TextBlock Name="TextBlockForTestingChildWindow" Text="TextBlock" />
            </StackPanel>
            <!-- Testing Viewbox -->
            <TextBlock Text="Testing Viewbox:" Margin="0,10,0,0"/>
            <Border Background="Blue" Width="100" Height="50">
                <Viewbox>
                    <Ellipse Width="200" Height="200" Fill="Red"/>
                </Viewbox>
            </Border>
            <Border Background="LightGreen" Width="100" Height="50">
                <Viewbox Stretch="Fill">
                    <Ellipse Width="200" Height="200" Fill="Red"/>
                </Viewbox>
            </Border>
            <Border Background="Yellow" Width="100" Height="50">
                <Viewbox Stretch="UniformToFill">
                    <Ellipse Width="200" Height="200" Fill="Red"/>
                </Viewbox>
            </Border>
            <Border Background="Purple" Width="100" Height="50">
                <Viewbox Stretch="None">
                    <Ellipse Width="200" Height="200" Fill="Red"/>
                </Viewbox>
            </Border>
            <Border x:Name="BorderWithoutHeight" Width="150">
                <Viewbox Stretch="Uniform">
                    <Ellipse Width="25" Height="25" Fill="Blue"/>
                </Viewbox>
            </Border>


            <!-- Testing Frame -->
            <TextBlock Text="Testing Frame:" Margin="0,10,0,0"/>
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <Border BorderBrush="DarkGray" BorderThickness="2" Padding="3">
                    <StackPanel Orientation="Vertical">
                        <TextBlock Text="JournalOwnership = UsesParentJournal" Foreground="Black" FontSize="14"/>
                        <StackPanel Orientation="Horizontal">
                            <Button Background="#DDDDDD" Click="Frame1_GoBack_Clicked" Margin="0,0,1,0" Content="&lt;--"/>
                            <Button Background="#DDDDDD" Click="Frame1_p1_Clicked" Margin="0,0,1,0" Content="p1"/>
                            <Button Background="#DDDDDD" Click="Frame1_p2_Clicked" Margin="0,0,1,0" Content="p2"/>
                            <Button Background="#DDDDDD" Click="Frame1_GoForward_Clicked" Content="--&gt;"/>
                        </StackPanel>
                        <sdk:Frame x:Name="MyFrame" JournalOwnership="UsesParentJournal">
                            <sdk:Frame.Template>
                                <ControlTemplate>
                                    <Border>
                                        <StackPanel Orientation="Vertical">
                                            <ContentPresenter/>
                                            <TextBlock Text="InnerFrame.JournalOwnership = Automatic" Foreground="Black" FontSize="14"/>
                                            <StackPanel Orientation="Horizontal">
                                                <Button DataContext="{Binding ElementName=MyInnerFrame}" Background="#DDDDDD" Click="InnerFrame_GoBack_Clicked" Margin="0,0,1,0" Content="&lt;--"/>
                                                <Button DataContext="{Binding ElementName=MyInnerFrame}" Background="#DDDDDD" Click="InnerFrame_p1_Clicked" Margin="0,0,1,0" Content="p1"/>
                                                <Button DataContext="{Binding ElementName=MyInnerFrame}" Background="#DDDDDD" Click="InnerFrame_p2_Clicked" Margin="0,0,1,0" Content="p2"/>
                                                <Button DataContext="{Binding ElementName=MyInnerFrame}" Background="#DDDDDD" Click="InnerFrame_GoForward_Clicked" Content="--&gt;"/>
                                            </StackPanel>
                                            <sdk:Frame x:Name="MyInnerFrame" JournalOwnership="Automatic">
                                                <sdk:Frame.Template>
                                                    <ControlTemplate>
                                                        <Border>
                                                            <ContentPresenter/>
                                                        </Border>
                                                    </ControlTemplate>
                                                </sdk:Frame.Template>
                                                <sdk:Frame.UriMapper>
                                                    <sdk:UriMapper>
                                                        <sdk:UriMapping
                            Uri="/{pageName}"
                            MappedUri="/FrameSubPages/{pageName}.xaml"/>
                                                    </sdk:UriMapper>
                                                </sdk:Frame.UriMapper>
                                            </sdk:Frame>
                                        </StackPanel>
                                    </Border>
                                </ControlTemplate>
                            </sdk:Frame.Template>
                            <sdk:Frame.UriMapper>
                                <sdk:UriMapper>
                                    <sdk:UriMapping
                            Uri="/{pageName}"
                            MappedUri="/FrameSubPages/{pageName}.xaml"/>
                                </sdk:UriMapper>
                            </sdk:Frame.UriMapper>
                        </sdk:Frame>
                    </StackPanel>
                </Border>
                <Border BorderBrush="DarkGray" BorderThickness="2" Padding="3" Grid.Column="1">
                    <StackPanel Orientation="Vertical">
                        <TextBlock Text="JournalOwnership = OwnsJournal" Foreground="Black" FontSize="14"/>
                        <StackPanel Orientation="Horizontal">
                            <Button Background="#DDDDDD" Click="Frame2_GoBack_Clicked" Margin="0,0,1,0" Content="&lt;--"/>
                            <Button Background="#DDDDDD" Click="Frame2_p1_Clicked" Margin="0,0,1,0" Content="p1"/>
                            <Button Background="#DDDDDD" Click="Frame2_p2_Clicked" Margin="0,0,1,0" Content="p2"/>
                            <Button Background="#DDDDDD" Click="Frame2_GoForward_Clicked" Content="--&gt;"/>
                        </StackPanel>
                        <sdk:Frame x:Name="MyFrame2" JournalOwnership="OwnsJournal">
                            <sdk:Frame.Template>
                                <ControlTemplate>
                                    <Border>
                                        <ContentPresenter/>
                                    </Border>
                                </ControlTemplate>
                            </sdk:Frame.Template>
                            <sdk:Frame.UriMapper>
                                <sdk:UriMapper>
                                    <sdk:UriMapping
                            Uri="/{pageName}"
                            MappedUri="/FrameSubPages/{pageName}.xaml"/>
                                </sdk:UriMapper>
                            </sdk:Frame.UriMapper>
                        </sdk:Frame>
                    </StackPanel>
                </Border>
                <Border BorderBrush="DarkGray" BorderThickness="2" Padding="3" Grid.Column="2">
                    <StackPanel Orientation="Vertical">
                        <TextBlock Text="JournalOwnership = Automatic" Foreground="Black" FontSize="14"/>
                        <StackPanel Orientation="Horizontal">
                            <Button Background="#DDDDDD" Click="Frame3_GoBack_Clicked" Margin="0,0,1,0" Content="&lt;--"/>
                            <Button Background="#DDDDDD" Click="Frame3_p1_Clicked" Margin="0,0,1,0" Content="p1"/>
                            <Button Background="#DDDDDD" Click="Frame3_p2_Clicked" Margin="0,0,1,0" Content="p2"/>
                            <Button Background="#DDDDDD" Click="Frame3_GoForward_Clicked" Content="--&gt;"/>
                        </StackPanel>
                        <sdk:Frame x:Name="MyFrame3" JournalOwnership="Automatic">
                            <sdk:Frame.Template>
                                <ControlTemplate>
                                    <Border>
                                        <ContentPresenter/>
                                    </Border>
                                </ControlTemplate>
                            </sdk:Frame.Template>
                            <sdk:Frame.UriMapper>
                                <sdk:UriMapper>
                                    <sdk:UriMapping
                            Uri="/{pageName}"
                            MappedUri="/FrameSubPages/{pageName}.xaml"/>
                                </sdk:UriMapper>
                            </sdk:Frame.UriMapper>
                        </sdk:Frame>
                    </StackPanel>
                </Border>
            </Grid>










            <!-- Testing events in a Grid with multiple elements -->
            <TextBlock Text="Testing events in a Grid with multiple elements:" Margin="0,10,0,0"/>
            <Grid Width="200" Height="80">
                <Button Content="Left button" Click="TestLeftButton_Click" HorizontalAlignment="Left"/>
                <Button Content="Right button" Click="TestRightButton_Click" HorizontalAlignment="Right"/>
            </Grid>
            <!-- Testing events -->
            <TextBlock Text="Testing EVENTS 1:" Margin="0,10,0,0"/>
            <Button Width="200" Height="200" Background="#DDDDDD" Click="TestButtonParent1_Click">
                <Button HorizontalAlignment="Center" VerticalAlignment="Center" Click="TestButtonParent2_Click">
                    <Rectangle Fill="Red" Width="100" Height="100"/>
                </Button>
            </Button>
            <TextBlock Text="Testing EVENTS 2:"/>
            <!-- <Canvas Width="200" Height="200" Background="#DDDDDD" PointerPressed="TestButtonParent_Click"> -->
            <Canvas Width="200" Height="200" Background="#DDDDDD" MouseLeftButtonDown="TestButtonParent_Click">
                <TextBlock x:Name="TestButtonParentCount" Text="1" Canvas.Left="0" Canvas.Top="0"/>
                <TextBlock x:Name="TestButton1Count" Text="1" Canvas.Left="0" Canvas.Top="20"/>
                <TextBlock x:Name="TestButton2Count" Text="1" Canvas.Left="0" Canvas.Top="40"/>
                <!-- <Border Background="#FFFFFFAA" Canvas.Left="30" Canvas.Top="60" Width="50" Height="70" PointerPressed="TestButton1_Click"/> -->
                <!-- <Border Background="#FFFFFFAA" Canvas.Left="45" Canvas.Top="85" Width="50" Height="70" PointerPressed="TestButton2_Click"/> -->
                <Border Background="#FFFFFFAA" Canvas.Left="30" Canvas.Top="60" Width="50" Height="70" MouseLeftButtonDown="TestButton1_Click"/>
                <Border Background="#FFFFFFAA" Canvas.Left="45" Canvas.Top="85" Width="50" Height="70" MouseLeftButtonDown="TestButton2_Click"/>
            </Canvas>
            <TextBlock Text="Testing ATTACH/DETACH EVENTS:"/>
            <Canvas Width="200" Height="200" Background="#DDDDDD">
                <Button Width="100" Height="50" Content="Attach Click" Background="#DDDDDD" Canvas.Left="0" Canvas.Top="0" Click="TestAttachClickButton_Click"/>
                <Button Width="100" Height="50" Content="Detach Click" Background="#DDDDDD" Canvas.Left="100" Canvas.Top="0" Click="TestDetachClickButton_Click"/>
                <Button x:Name="ClickMeButton" Width="200" Height="50" Content="Click me" Canvas.Left="0" Canvas.Top="50" Background="#DDDDDD"/>
            </Canvas>

            <!-- Testing "TextChanged" event -->
            <Border BorderBrush="Gray" BorderThickness="2" Margin="3" HorizontalAlignment="Left">
                <StackPanel Width="250">
                    <TextBlock Text="Testing TEXTCHANGED event:"/>
                    <TextBlock TextWrapping="Wrap">At every TextChange the pink counter should increase by one, and the yellow TextBlock should contain the same text as the one you type.</TextBlock>
                    <TextBox x:Name="TestTextChanged_TextBox" TextChanged="TestTextChanged_TextBox_TextChanged"/>
                    <!--SLDISABLED-->
                    <!--<TextBlock x:Name="TestTextChanged_Count" Text="0"  Background="Pink"/>-->
                    <TextBlock x:Name="TestTextChanged_Count" Text="0" />
                    <!--SLDISABLED-->
                    <!--<TextBlock x:Name="TestTextChanged_TextBlock" Text="{Binding ElementName=TestTextChanged_TextBox, Path=Text}" Background="Yellow"/>-->
                    <TextBlock x:Name="TestTextChanged_TextBlock" Text="{Binding ElementName=TestTextChanged_TextBox, Path=Text}" />
                </StackPanel>
            </Border>

            <TextBlock Text="Testing templated TextBox:" Margin="0,10,0,0"/>
            <Grid Width="600" Background="LightGray">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <!-- Testing Foreground -->
                <Border Grid.Row="0" BorderBrush="Black" BorderThickness="0,0,1,1"/>
                <Border Grid.Row="0" Grid.Column="1" BorderBrush="Black" BorderThickness="0,0,1,1" Padding="2">
                    <TextBlock Text="Not templated:"/>
                </Border>
                <Border Grid.Row="0" Grid.Column="2" BorderBrush="Black" BorderThickness="0,0,0,1" Padding="2">
                    <TextBlock Text="Templated:"/>
                </Border>
                <Border Grid.Row="1" BorderBrush="Black" BorderThickness="0,0,1,1" Padding="2">
                    <TextBlock Text="Foreground:"/>
                </Border>
                <Border Grid.Row="1" Grid.Column="1" BorderBrush="Black" BorderThickness="0,0,1,1" Padding="2">
                    <TextBox Text="Test" Background="White" Foreground="Green"/>
                </Border>
                <Border Grid.Row="1" Grid.Column="2" BorderBrush="Black" BorderThickness="0,0,0,1" Padding="2">
                    <TextBox Style="{StaticResource TextBoxStyle1}" Text="Test" Background="White" Foreground="Green"/>
                </Border>
                <!-- Testing MaxWidth/MaxHeight -->
                <Border Grid.Row="2" BorderBrush="Black" BorderThickness="0,0,1,1" Padding="2">
                    <TextBlock Text="MaxWidth/MaxHeight:"/>
                </Border>
                <Border Grid.Row="2" Grid.Column="1" BorderBrush="Black" BorderThickness="0,0,1,1" Padding="2">
                    <TextBox Text="Test" Background="White" MaxWidth="80" MaxHeight="50" TextWrapping="Wrap"/>
                </Border>
                <Border Grid.Row="2" Grid.Column="2" BorderBrush="Black" BorderThickness="0,0,0,1" Padding="2">
                    <TextBox Style="{StaticResource TextBoxStyle1}" Text="Test" Background="White" MaxWidth="30" MaxHeight="20" TextWrapping="Wrap"/>
                </Border>
                <!-- Testing AcceptsReturn -->
                <Border Grid.Row="3" BorderBrush="Black" BorderThickness="0,0,1,1" Padding="2">
                    <TextBlock Text="AcceptsReturn:"/>
                </Border>
                <Border Grid.Row="3" Grid.Column="1" BorderBrush="Black" BorderThickness="0,0,1,1" Padding="2">
                    <TextBox Text="Test" Background="White" AcceptsReturn="True"/>
                </Border>
                <Border Grid.Row="3" Grid.Column="2" BorderBrush="Black" BorderThickness="0,0,0,1" Padding="2">
                    <TextBox Style="{StaticResource TextBoxStyle1}" Text="Test" Background="White" AcceptsReturn="True"/>
                </Border>
                <!-- Testing MaxLength -->
                <Border Grid.Row="4" BorderBrush="Black" BorderThickness="0,0,1,1" Padding="2">
                    <TextBlock Text="MaxLength:"/>
                </Border>
                <Border Grid.Row="4" Grid.Column="1" BorderBrush="Black" BorderThickness="0,0,1,1" Padding="2">
                    <TextBox Text="Test" Background="White" MaxLength="10"/>
                </Border>
                <Border Grid.Row="4" Grid.Column="2" BorderBrush="Black" BorderThickness="0,0,0,1" Padding="2">
                    <TextBox Style="{StaticResource TextBoxStyle1}" Text="Test" Background="White" MaxLength="10"/>
                </Border>
                <!-- Testing SelectAll -->
                <Border Grid.Row="5" BorderBrush="Black" BorderThickness="0,0,1,0" Padding="2">
                    <StackPanel Orientation="Vertical">
                        <Button Content="SelectAll (normal):" Click="ButtonTestNormalTextBoxSelectAll_Click"/>
                        <Button Content="SelectAll (templated):" Click="ButtonTestTemplatedTextBoxSelectAll_Click"/>
                    </StackPanel>
                </Border>
                <Border Grid.Row="5" Grid.Column="1" BorderBrush="Black" BorderThickness="0,0,1,0" Padding="2">
                    <TextBox x:Name="SelectAllTestNormalTextBox" Text="Test" Background="White"/>
                </Border>
                <Border Grid.Row="5" Grid.Column="2" Padding="2">
                    <TextBox x:Name="SelectAllTestTemplatedTextBox" Style="{StaticResource TextBoxStyle1}" Text="Test" Background="White"/>
                </Border>
            </Grid>

            <!-- Testing Behavior -->
            <Border BorderBrush="Gray" BorderThickness="2" Margin="3" HorizontalAlignment="Left">
                <StackPanel Width="250">
                    <TextBlock Text="Testing Behavior:"/>
                    <TextBlock TextWrapping="Wrap">The TextBoxes should display a text when empty and out of focus.</TextBlock>
                    <TextBox x:Name="TestBehaviorTextBox" Foreground="Green"/>
                    <TextBox x:Name="TestBehaviorTextBox2">
                        <interaction:Interaction.Behaviors>
                            <local:HintBehavior Text="This is where you are supposed to type" HintForeground="Blue"/>
                        </interaction:Interaction.Behaviors>
                    </TextBox>
                    <Button Content="OK" Click="TestBehaviorButton_Click"/>
                </StackPanel>
            </Border>

            <!-- Testing Bindings -->
            <TextBlock Text="Testing BINDINGS:"/>
            <StackPanel Orientation="Horizontal">
                <TextBox x:Name="TextboxForBinding1" Width="100" Height="30"/>
                <Image Source="ms-appx:/Images/arrow_right.png" VerticalAlignment="Center" Stretch="None"/>
                <TextBox Width="100" Height="30" Text="{Binding ElementName=TextboxForBinding1, Path=Text}"/>
            </StackPanel>
            <StackPanel Orientation="Horizontal">
                <TextBox x:Name="TextboxForBinding2" Width="100" Height="30"/>
                <Image Source="ms-appx:/Images/arrow_right_and_left.png" VerticalAlignment="Center" Stretch="None"/>
                <TextBox Width="100" Height="30" Text="{Binding ElementName=TextboxForBinding2, Path=Text, Mode=TwoWay}"/>
            </StackPanel>
            <StackPanel x:Name="StackPanelForBinding" Background="LightGreen">
                <TextBlock x:Name="TestBindingTextblock" Text="{Binding Text}"/>
                <Button x:Name="Button1" Content="Set DataContext" Click="ButtonSetDataContext_Click"/>
                <Button x:Name="Button2" Content="Remove and add TextBlock" Click="ButtonTestBinding_Click"/>
                <Button x:Name="Button3" Content="ChangeDataContext" Click="ButtonTestBinding2_Click"/>
            </StackPanel>

            <!-- Testing Transforms -->
            <TextBlock Text="Testing TRANSFORMS (try to click on the one that moves to see how the click works with transforms):"/>
            <StackPanel Orientation="Horizontal">
                <Button Width="100" Height="30" Content="Translate"  Click="ButtonTranslate_Click"/>
                <Button Width="100" Height="30" Content="Rotate"  Click="ButtonRotate_Click"/>
            </StackPanel>
            <Canvas Width="200" Height="200" Background="#DDDDDD">
                <Button x:Name="TestTransformBorder" Canvas.ZIndex="10"  Width="30" Height="30" Background="Blue" Click="TransformButton_Click"/>
                <Rectangle Width="30" Height="30" Fill="Red">
                    <Rectangle.RenderTransform>
                        <TranslateTransform X="20" Y="50"/>
                    </Rectangle.RenderTransform>
                </Rectangle>
            </Canvas>
            <Canvas Height="200" Width="200" Background="#DDDDDD" Margin="0,20,0,0">
                <TextBox Text="ScaleTransform" BorderThickness="2" BorderBrush="Black">
                    <TextBox.RenderTransform>
                        <ScaleTransform ScaleX="1.5" ScaleY="3"/>
                    </TextBox.RenderTransform>
                </TextBox>
                <TextBox Text="TranslateTransform" RenderTransformOrigin="0.5,0.5" BorderThickness="2" BorderBrush="Black">
                    <TextBox.RenderTransform>
                        <TranslateTransform X="30" Y="100"/>
                    </TextBox.RenderTransform>
                </TextBox>
                <TextBox Text="RotateTransform" RenderTransformOrigin="1,0" BorderThickness="2" BorderBrush="Black">
                    <TextBox.RenderTransform>
                        <RotateTransform Angle="-65"/>
                    </TextBox.RenderTransform>
                </TextBox>
                <TextBox Text="SkewTransform" BorderThickness="2" BorderBrush="Black">
                    <TextBox.RenderTransform>
                        <SkewTransform AngleX="15" AngleY="5"/>
                    </TextBox.RenderTransform>
                </TextBox>
                <TextBox Text="CompositeTransform" RenderTransformOrigin="0.5,0.5" BorderThickness="2" BorderBrush="Black">
                    <TextBox.RenderTransform>
                        <CompositeTransform TranslateX="40" TranslateY="112" Rotation="18" ScaleX="0.8" SkewY="-25" ScaleY="1.25"/>
                    </TextBox.RenderTransform>
                </TextBox>
                <TextBox Text="MatrixTransform" RenderTransformOrigin="0.5,0.5" BorderThickness="2" BorderBrush="Black">
                    <TextBox.RenderTransform>
                        <MatrixTransform Matrix="1.3,0.5,0,1,25,80"/>
                    </TextBox.RenderTransform>
                </TextBox>
            </Canvas>

            <!-- Testing Animations -->
            <TextBlock Text="Testing Animations"/>
            <StackPanel Orientation="Horizontal">
                <StackPanel Background="LightYellow" HorizontalAlignment="Left">
                    <TextBlock Text="ColorAnimation through Storyboard:" FontWeight="Bold" Margin="2,2,2,7"/>
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="Border; Color; binding Background:"/>
                        <Grid Width="50" Height="20">
                            <Border Background="Black" Width="25" Height="20"/>
                            <Border x:Name="TestBorder" Background="Black" Width="50" Height="20"/>
                        </Grid>
                        <Grid Width="50" Height="20" Margin="2">
                            <Border Background="Black" Width="25" Height="20"/>
                            <Border Background="{Binding Path=Background, ElementName=TestBorder}" Width="50" Height="20"/>
                        </Grid>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="Border; Background; From too; binding Background:"/>
                        <Grid Width="50" Height="20" Margin="5">
                            <Border Background="Black" Width="25" Height="20"/>
                            <Border x:Name="TestBorder2" Background="Black" Width="50" Height="20"/>
                        </Grid>
                        <Grid Width="50" Height="20" Margin="2">
                            <Border Background="Black" Width="25" Height="20"/>
                            <Border Background="{Binding Path=Background, ElementName=TestBorder2}" Width="50" Height="20"/>
                        </Grid>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="Button; Color:"/>
                        <Grid Width="50" Height="30" Margin="5">
                            <Border Background="Black" Width="25" Height="20"/>
                            <Button x:Name="TestButton" Content="Yay" Width="50" Height="30"/>
                        </Grid>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="Button; Background:"/>
                        <Grid Width="50" Height="30" Margin="5">
                            <Border Background="Black" Width="25" Height="20"/>
                            <Button x:Name="TestButton2" Content="Yay" Width="50" Height="30"/>
                        </Grid>
                    </StackPanel>
                    <Button x:Name="TestButton3" Content="Test ColorAnimations" BorderBrush="Black" BorderThickness="1" Click="ButtonTestAnimations_Click"/>
                </StackPanel>
                <StackPanel Background="WhiteSmoke">
                    <TextBlock Text="DoubleAnimation through VisualStateManager:" TextWrapping="Wrap" FontWeight="Bold" Margin="2,2,2,7"/>

                    <Button Content="Linear" Style="{StaticResource TestButtonStyle1}"/>
                    <Button Content="Circle" Style="{StaticResource TestButtonStyle2}"/>
                    <Button Content="Cubic" Style="{StaticResource TestButtonStyle3}"/>
                    <Button Content="Exponential" Style="{StaticResource TestButtonStyle4}"/>
                    <Button Content="Quadratic" Style="{StaticResource TestButtonStyle5}"/>
                    <Button Content="Quartic" Style="{StaticResource TestButtonStyle6}"/>
                    <Button Content="Quintic" Style="{StaticResource TestButtonStyle7}"/>
                    <Button Content="Sine" Style="{StaticResource TestButtonStyle8}"/>
                    <Button Content="Weeee!" Style="{StaticResource TestButtonStyle9}"/>
                </StackPanel>
                <StackPanel>
                    <Button Content="Oooh! Pretty!" Style="{StaticResource TestObjectAnimationUsingKeyFramesStyle1}"/>
                </StackPanel>
            </StackPanel>

            <!-- Testing PointerMove and PointerCapture -->
            <TextBlock Text="Testing PointerMove and PointerCapture"/>
            <TextBlock Text="Clicking then dragging the yellow border makes it move.
                            The Background Border changes color when the pointer moves on it.
                            Dragging the yellow Border also changes the Background Boder's color because it is a parent of the yellow one."
                       TextWrapping="Wrap" FontSize="14"/>
            <!--<Border Background="Red" Width="200" Height="200" VerticalAlignment="Top" HorizontalAlignment="Left" Margin="10" PointerMoved="ContainerBorderForPointerEvents_PointerMoved">-->
            <Border Background="Red" Width="200" Height="200" VerticalAlignment="Top" HorizontalAlignment="Left" Margin="10" MouseMove="ContainerBorderForPointerEvents_PointerMoved">
                <!-- <Border Background="Yellow" Width="50" Height="50" HorizontalAlignment="Left" VerticalAlignment="Top" PointerPressed="InnerBorderForPointerEvents_PointerPressed_1" PointerReleased="InnerBorderForPointerEvents_PointerReleased_1" PointerMoved="InnerBorderForPointerEvents_PointerMoved"> -->
                <Border Background="Yellow" Width="50" Height="50" HorizontalAlignment="Left" VerticalAlignment="Top" MouseLeftButtonDown="InnerBorderForPointerEvents_PointerPressed_1" MouseLeftButtonUp="InnerBorderForPointerEvents_PointerReleased_1" MouseMove="InnerBorderForPointerEvents_PointerMoved">
                    <TextBlock x:Name="PointerCaptureTextBlock" FontSize="11" TextWrapping="Wrap"/>
                </Border>
            </Border>

            <!-- Testing cursors -->
            <TextBlock Text="Testing Cursors"/>
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition/>
                    <ColumnDefinition/>
                    <ColumnDefinition/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition/>
                    <RowDefinition/>
                    <RowDefinition/>
                    <RowDefinition/>
                </Grid.RowDefinitions>
                <!--SLDISABLED-->
                <!--<Border Background="Beige" Cursor="AppStarting" Margin="1,2" Grid.Row="0" Grid.Column="0">
                    <TextBlock Text="AppStarting"/>
                </Border>-->
                <Border Background="Beige" Cursor="Arrow" Margin="1,2" Grid.Row="0" Grid.Column="1">
                    <TextBlock Text="Arrow"/>
                </Border>
                <!--SLDISABLED-->
                <!--<Border Background="Beige" Cursor="Cross" Margin="1,2" Grid.Row="0" Grid.Column="2">
                    <TextBlock Text="Cross"/>
                </Border>-->
                <Border Background="Beige" Cursor="Hand" Margin="1,2" Grid.Row="0" Grid.Column="3">
                    <TextBlock Text="Hand"/>
                </Border>
                <!--SLDISABLED-->
                <!--<Border Background="Beige" Cursor="Help" Margin="1,2" Grid.Row="1" Grid.Column="0">
                    <TextBlock Text="Help"/>
                </Border>-->
                <Border Background="Beige" Cursor="IBeam" Margin="1,2" Grid.Row="1" Grid.Column="1">
                    <TextBlock Text="IBeam"/>
                </Border>
                <!--SLDISABLED-->
                <!--<Border Background="Beige" Cursor="No" Margin="1,2" Grid.Row="1" Grid.Column="2">
                    <TextBlock Text="No"/>
                </Border>-->
                <Border Background="Beige" Cursor="None" Margin="1,2" Grid.Row="1" Grid.Column="3">
                    <TextBlock Text="None"/>
                </Border>
                <!--SLDISABLED-->
                <!--<Border Background="Beige" Cursor="SizeAll" Margin="1,2" Grid.Row="2" Grid.Column="0">
                    <TextBlock Text="SizeAll"/>
                </Border>-->
                <Border Background="Beige" Cursor="SizeNESW" Margin="1,2" Grid.Row="2" Grid.Column="1">
                    <TextBlock Text="SizeNESW"/>
                </Border>
                <Border Background="Beige" Cursor="SizeNS" Margin="1,2" Grid.Row="2" Grid.Column="2">
                    <TextBlock Text="SizeNS"/>
                </Border>
                <Border Background="Beige" Cursor="SizeNWSE" Margin="1,2" Grid.Row="2" Grid.Column="3">
                    <TextBlock Text="SizeNWSE"/>
                </Border>
                <Border Background="Beige" Cursor="SizeWE" Margin="1,2" Grid.Row="3" Grid.Column="0">
                    <TextBlock Text="SizeWE"/>
                </Border>
                <Border Background="Beige" Cursor="Wait" Margin="1,2" Grid.Row="3" Grid.Column="1">
                    <TextBlock Text="Wait"/>
                </Border>
            </Grid>

            <!-- Testing RadioButton -->
            <TextBlock Text="Testing Visibility"/>
            <TextBlock FontSize="14" TextWrapping="Wrap" Text="The red RadioButtons belong to the group &quot;Group1&quot; while the blue ones do not belong to any group."/>

            <StackPanel Background="LightGray">
                <RadioButton GroupName="Group1" Content="Peanuts" Foreground="Red"/>
                <RadioButton Content="Yay!" Foreground="Blue"/>
                <RadioButton Content="Meh" Foreground="Blue"/>
            </StackPanel>
            <RadioButton GroupName="Group1" Content="3Ds" Foreground="Red"/>
            <RadioButton GroupName="Group1" Content="Tuc" Foreground="Red"/>
            <RadioButton Content="Skittles" Foreground="Blue"/>
            <RadioButton Content="m&amp;m's" Foreground="Blue"/>

            <!-- Testing Visibility -->
            <TextBlock Text="Testing Visibility"/>
            <StackPanel Orientation="Vertical">
                <Button Width="100" Height="30" Content="Show/Hide"  Click="ButtonVisibility_Click"/>
                <Border x:Name="VisibilityBorder" Width="100" Height="100" Background="Cyan"/>
            </StackPanel>
            <!-- Testing the WrapPanel -->
            <!--<TextBlock Text="Testing the WRAPPANEL:"/>-->
            <!--<WrapPanel Orientation="Horizontal" Background="#DDDDDD">
                <TextBlock Text="1erElement"/>
                <TextBlock Text="2eElement"/>
                <Button Content="Button !!!" Width="50" Height="50"/>
                <TextBlock Text="3eElement"/>
                <TextBlock Text="4eElement"/>
                <TextBlock Text="5eElement"/>
                <TextBlock Text="6eElement"/>
            </WrapPanel>-->

            <!-- Testing the GRID -->
            <TextBlock Text="Testing the GRID:"/>
            <!--SLDISABLED-->
            <!--<Grid Width="200" Height="200" Background="#DDDDDD" ClipToBounds="True">-->
            <Grid Width="200" Height="200" Background="#DDDDDD">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="70"/>
                    <ColumnDefinition Width="3*"/>
                </Grid.ColumnDefinitions>
                <Border Background="#FFFFFFAA" Width="50" Height="70" CornerRadius="15,0, 0, 15">
                    <TextBlock Text="This is a test sentence"/>
                </Border>
                <Border Background="#FFAAFFAA" Grid.Column="1" CornerRadius="15,0, 0, 15"/>
            </Grid>


            <TextBlock Text="Testing Grid canvas overlapping bug (which is supposed to be corrected, happened in the CSS grid):" Margin="0,10,0,0"/>
            <Border Background="LightGray" BorderBrush="Gray" BorderThickness="2" Margin="10" Padding="5">
                <StackPanel Orientation="Vertical">
                    <StackPanel Orientation="Horizontal">
                        <Grid Margin="2" Width="100" Height="30">
                            <TextBlock Text="Test 2" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            <Rectangle Width="100" Height="30" Fill="Lime"/>
                            <TextBlock Text="Test" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Grid>
                        <TextBlock Text="We should only see Test written on a Lime rectangle here."/>
                    </StackPanel>

                    <StackPanel Orientation="Horizontal" Background="WhiteSmoke">
                        <Grid x:Name="TestBugCanvasInGrid" Width="100" Height="30" Margin="2" Background="LightGray"/>
                        <TextBlock Text="The new thing aded should always be on top."/>
                    </StackPanel>
                    <Button Content="Add Canvas to Grid" Click="TestBugCanvasInGrid_AddCanvas_Click"/>
                    <Button Content="Add Text to Grid" Click="TestBugCanvasInGrid_AddText_Click"/>
                    <Button Content="Reset Grid children" Click="TestBugCanvasInGrid_Reset_Click"/>
                </StackPanel>
            </Border>
            <TextBlock Text="Testing Grid Spans:" Margin="0,10,0,0"/>
            <Border Background="LightGray" BorderBrush="Gray" BorderThickness="2" Margin="10" Padding="5">
                <StackPanel Orientation="Vertical">
                    <TextBlock Text="Basic Grid with Spans:" Margin="0,10,0,0"/>
                    <Border Background="WhiteSmoke" BorderBrush="Gray" BorderThickness="2" Margin="10" Padding="5">
                        <StackPanel Orientation="Vertical">
                            <Grid x:Name="FirstGrid" Background="LightGray" Width="300" Height="210">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="70"/>
                                    <RowDefinition Height="70"/>
                                    <RowDefinition Height="70"/>
                                </Grid.RowDefinitions>
                                <Border HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="Yellow" Grid.ColumnSpan="2" Margin="5"/>
                                <Border HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="Orange" Grid.Column="0" Grid.Row="1" Grid.RowSpan="2" Margin="5"/>
                                <Border HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="Red" Grid.Column="0" Grid.Row="2"  Opacity="0.5"/>
                                <Border HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="LightGreen" Grid.Column="1" Grid.Row="0" Grid.RowSpan="2" Opacity="0.5"/>
                                <Border HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="Lime" Grid.Column="1" Grid.Row="1" Grid.ColumnSpan="2" Margin="5"/>
                                <Border HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="Green" Grid.Column="1" Grid.Row="2"/>
                                <Border HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="LightBlue" Grid.Column="2" Grid.Row="0" Grid.RowSpan="2" Margin="10" Opacity="0.5"/>
                                <Border HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="Blue" Grid.Column="2" Grid.Row="1" Opacity="0.5"/>
                                <Border HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="DarkBlue" Grid.Column="2" Grid.Row="2"/>
                            </Grid>
                            <StackPanel Orientation="Horizontal">
                                <TextBlock Text="Row: " Margin="5"/>
                                <TextBox x:Name="ElementRowIndexTextBox"  Text="0" TextChanged="ElementRowIndexTextBox_TextChanged"/>
                                <TextBlock Text="Column:" Margin="10, 5, 5, 5"/>
                                <TextBox x:Name="ElementColumnIndexTextBox" Text="0" TextChanged="ElementRowIndexTextBox_TextChanged"/>
                            </StackPanel>
                            <StackPanel Orientation="Horizontal">
                                <TextBlock Text="Column Width: "/>
                                <TextBlock x:Name="ColumnWidthTextBlock" Text="Set column above"/>
                            </StackPanel>
                            <StackPanel Orientation="Horizontal">
                                <TextBlock Text="Row Height: "/>
                                <TextBlock x:Name="RowHeightTextBlock" Text="Set row above"/>
                            </StackPanel>
                        </StackPanel>
                    </Border>
                    <TextBlock Text="Same Grid without a fixed height for its rows:" Margin="0,10,0,0"/>
                    <Border Background="WhiteSmoke" BorderBrush="Gray" BorderThickness="2" Margin="10" Padding="5">
                        <StackPanel Orientation="Vertical">
                            <Grid Background="LightGray" Width="300" Height="210" Margin="10">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*"/>
                                    <RowDefinition Height="*"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>
                                <Border HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="Yellow" Grid.ColumnSpan="2"  Margin="5"/>
                                <Border HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="Orange" Grid.Column="0" Grid.Row="1" Grid.RowSpan="2" Margin="5"/>
                                <Border HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="Red" Grid.Column="0" Grid.Row="2" Opacity="0.5"/>
                                <Border HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="LightGreen" Grid.Column="1" Grid.Row="0"  Grid.RowSpan="2" Opacity="0.5"/>
                                <Border HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="Lime" Grid.Column="1" Grid.Row="1" Grid.ColumnSpan="2" Margin="5"/>
                                <Border HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="Green" Grid.Column="1" Grid.Row="2" />
                                <Border HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="LightBlue" Grid.Column="2" Grid.Row="0" Grid.RowSpan="2" Margin="10" Opacity="0.5"/>
                                <Border HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="Blue" Grid.Column="2" Grid.Row="1" Opacity="0.5"/>
                                <Border HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="DarkBlue" Grid.Column="2" Grid.Row="2"/>
                            </Grid>
                        </StackPanel>
                    </Border>
                    <TextBlock Text="Same grid with children added when we click on the button:" Margin="0,10,0,0"/>
                    <Border Background="WhiteSmoke" BorderBrush="Gray" BorderThickness="2" Margin="10" Padding="5">
                        <StackPanel Orientation="Vertical">
                            <Grid x:Name="AddChildrenGrid" Background="LightGray" Width="300" Height="210" Margin="10">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*"/>
                                    <RowDefinition Height="*"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>
                            </Grid>
                            <Button Content="Test Add elements to grid" Click="ButtonAddElementsToGrid_Click"/>
                        </StackPanel>
                    </Border>

                    <TextBlock Text="Same grid with button for adding/removing each child:" Margin="0,10,0,0"/>
                    <Border Background="WhiteSmoke" BorderBrush="Gray" BorderThickness="2" Margin="10" Padding="5">
                        <StackPanel Orientation="Horizontal">
                            <Grid x:Name="AddRemoveChildrenGrid" Background="LightGray" Width="300" Height="210" Margin="10">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*"/>
                                    <RowDefinition Height="*"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>
                            </Grid>
                            <Grid Background="LightGray" Width="300" Height="210" Margin="10">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*"/>
                                    <RowDefinition Height="*"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>
                                <Button Background="White" Content="Add/Remove" FontSize="12" Click="ButtonAddRemove_0_0_Click" Margin="2"/>
                                <Button Background="White" Content="Add/Remove" FontSize="12" Click="ButtonAddRemove_1_0_Click" Grid.Row="1" Grid.Column="0" Margin="2"/>
                                <Button Background="White" Content="Add/Remove" FontSize="12" Click="ButtonAddRemove_2_0_Click" Grid.Row="2" Grid.Column="0" Margin="2"/>
                                <Button Background="White" Content="Add/Remove" FontSize="12" Click="ButtonAddRemove_0_1_Click" Grid.Row="0" Grid.Column="1" Margin="2"/>
                                <Button Background="White" Content="Add/Remove" FontSize="12" Click="ButtonAddRemove_1_1_Click" Grid.Row="1" Grid.Column="1" Margin="2"/>
                                <Button Background="White" Content="Add/Remove" FontSize="12" Click="ButtonAddRemove_2_1_Click" Grid.Row="2" Grid.Column="1" Margin="2"/>
                                <Button Background="White" Content="Add/Remove" FontSize="12" Click="ButtonAddRemove_0_2_Click" Grid.Row="0" Grid.Column="2" Margin="2"/>
                                <Button Background="White" Content="Add/Remove" FontSize="12" Click="ButtonAddRemove_1_2_Click" Grid.Row="1" Grid.Column="2" Margin="2"/>
                                <Button Background="White" Content="Add/Remove" FontSize="12" Click="ButtonAddRemove_2_2_Click" Grid.Row="2" Grid.Column="2" Margin="2"/>
                            </Grid>
                        </StackPanel>
                    </Border>
                    <TextBlock Text="Same grid with button adding/removing the last row/column:" Margin="0,10,0,0"/>
                    <Border Background="WhiteSmoke" BorderBrush="Gray" BorderThickness="2" Margin="10" Padding="5">
                        <StackPanel Orientation="Vertical">
                            <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                                <Grid x:Name="AddRemoveRowsColumnsGrid" Background="LightGray" Width="300" Height="210" Margin="10">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="*"/>
                                        <RowDefinition Height="*"/>
                                        <RowDefinition Height="*"/>
                                    </Grid.RowDefinitions>
                                    <Border HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="Yellow" Grid.ColumnSpan="2"  Margin="5"/>
                                    <Border HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="Orange" Grid.Column="0" Grid.Row="1" Grid.RowSpan="2" Margin="5"/>
                                    <Border HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="Red" Grid.Column="0" Grid.Row="2" Opacity="0.5"/>
                                    <Border HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="LightGreen" Grid.Column="1" Grid.Row="0"  Grid.RowSpan="2" Opacity="0.5"/>
                                    <Border HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="Lime" Grid.Column="1" Grid.Row="1" Grid.ColumnSpan="2" Margin="5"/>
                                    <Border HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="Green" Grid.Column="1" Grid.Row="2" />
                                    <Border HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="LightBlue" Grid.Column="2" Grid.Row="0" Grid.RowSpan="2" Margin="10" Opacity="0.5"/>
                                    <Border HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="Blue" Grid.Column="2" Grid.Row="1" Opacity="0.5"/>
                                    <Border HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="DarkBlue" Grid.Column="2" Grid.Row="2"/>
                                </Grid>
                                <StackPanel Orientation="Vertical" VerticalAlignment="Center">
                                    <Button Content="Add Column" Click="ButtonAddColumn"/>
                                    <Button Content="Remove Column" Click="ButtonRemoveColumn"/>
                                </StackPanel>
                            </StackPanel>
                            <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                                <Button Content="Add Row" Click="ButtonAddRow"/>
                                <Button Content="Remove Row" Click="ButtonRemoveRow"/>
                            </StackPanel>
                        </StackPanel>
                    </Border>
                </StackPanel>
            </Border>


            <TextBlock Text="Testing the GridSplitter:"/>
            <Grid x:Name="Grid1" Width="200" Height="100">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" MinWidth="50" />
                    <ColumnDefinition Width="5" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <Border Background="Blue" CornerRadius="2" Margin="2">
                    <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center" TextWrapping="Wrap" Foreground="White">Left side</TextBlock>
                </Border>
                <sdk:GridSplitter Grid.Column="1" HorizontalAlignment="Stretch"/>
                <Border Grid.Column="2" Background="Red" CornerRadius="2" Margin="2">
                    <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center" TextWrapping="Wrap" Foreground="White">Right side</TextBlock>
                </Border>
            </Grid>
            <Grid x:Name="Grid2" Width="200" Height="150" Background="Yellow" Margin="0,10,0,0">
                <Grid.RowDefinitions>
                    <RowDefinition/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition/>
                </Grid.RowDefinitions>
                <TextBox Grid.Row="0" Text="Up text"/>
                <sdk:GridSplitter Grid.Row="1" Height="3" HorizontalAlignment="Stretch" VerticalAlignment="Center" Background="Azure"/>
                <TextBox Grid.Row="2" Text="Down text"/>
            </Grid>

            <TextBlock Text="Testing the DOCKPANEL:"/>
            <tk:DockPanel Width="200" Height="180"  Background="#DDDDDD">
                <Border tk:DockPanel.Dock="Left" Width="50" Background="Blue" CornerRadius="2" Margin="2"/>
                <Border tk:DockPanel.Dock="Top" Height="50" Background="Red" CornerRadius="2" Margin="2"/>
                <Border tk:DockPanel.Dock="Right" Width="50" Background="Green" CornerRadius="2" Margin="2"/>
                <Border tk:DockPanel.Dock="Bottom" Height="50" Background="Orange" CornerRadius="2" Margin="2"/>
                <Border tk:DockPanel.Dock="Left" Width="50" Background="Purple" CornerRadius="2" Margin="2"/>
                <Border Background="Pink" CornerRadius="2" Margin="2"/>
            </tk:DockPanel>
            <Border Width="300" Padding="10" Background="#DDDDDD" Margin="0,20,0,0">
                <StackPanel>
                    <tk:DockPanel>
                        <TextBlock Text="First name:"/>
                        <TextBox tk:DockPanel.Dock="Right" Margin="5,0,0,0"/>
                    </tk:DockPanel>
                    <tk:DockPanel Margin="0,5,0,0">
                        <TextBlock Text="Age:"/>
                        <TextBox tk:DockPanel.Dock="Right" Margin="5,0,0,0"/>
                    </tk:DockPanel>
                    <tk:DockPanel Margin="0,5,0,0">
                        <TextBlock Text="Address:"/>
                        <TextBox tk:DockPanel.Dock="Right" Margin="5,0,0,0"/>
                    </tk:DockPanel>
                </StackPanel>
            </Border>

            <TextBlock Text="Testing the CANVAS:"/>
            <Canvas Width="200" Height="200" Background="#DDDDDD">
                <Rectangle Fill="#FFFFFFAA" Canvas.Left="30" Canvas.Top="60" Width="50" Height="70"/>
                <Border Background="#FFAAFFAA" CornerRadius="3,8,13, 18" Canvas.Left="45" Canvas.Top="85" Width="50" Height="70"/>
            </Canvas>
            <!-- Testing ALIGNMENT -->
            <TextBlock Text="Testing the ALIGNMENTS IN A GRID:"/>
            <Grid Width="300" Height="300" Background="#DDDDDD">
                <!-- Horiz-Stretch -->
                <Border HorizontalAlignment="Stretch" VerticalAlignment="Center" Background="#FFAA00FF">
                    <TextBlock Text="HorizStretch"/>
                </Border>
                <!-- Vert-Stretch -->
                <Border HorizontalAlignment="Center" VerticalAlignment="Stretch" Background="#FFFF00AA">
                    <TextBlock Text="VertStretch"/>
                </Border>
                <!-- Top-left -->
                <Border HorizontalAlignment="Left" VerticalAlignment="Top" Background="#FF00FF00">
                    <TextBlock Text="TopLeft"/>
                </Border>
                <!-- Top-center -->
                <Border HorizontalAlignment="Center" VerticalAlignment="Top" Background="#FFFFFFFF">
                    <TextBlock Text="TopCenter"/>
                </Border>
                <!-- Top-Right -->
                <Border HorizontalAlignment="Right" VerticalAlignment="Top" Background="#FFFFFF00">
                    <TextBlock Text="TopRight"/>
                </Border>
                <!-- Bottom-Left -->
                <Border HorizontalAlignment="Left" VerticalAlignment="Bottom" Background="#FFFF0000">
                    <TextBlock Text="BottomLeft"/>
                </Border>
                <!-- Bottom-Center -->
                <Border HorizontalAlignment="Center" VerticalAlignment="Bottom" Background="#FFAAFFAA">
                    <TextBlock Text="BottomCenter"/>
                </Border>
                <!-- Bottom-Right -->
                <Border HorizontalAlignment="Right" VerticalAlignment="Bottom" Background="#FF00FFFF">
                    <TextBlock Text="BottomRight"/>
                </Border>
                <!-- Center-Left -->
                <Border HorizontalAlignment="Left" VerticalAlignment="Center" Background="#FF0000FF">
                    <TextBlock Text="CenterLeft"/>
                </Border>
                <!-- Center -->
                <Border HorizontalAlignment="Center" VerticalAlignment="Center" Background="#FF000000">
                    <TextBlock Text="Center"/>
                </Border>
                <!-- Center-Right -->
                <Border HorizontalAlignment="Right" VerticalAlignment="Center" Background="#FFFF00FF">
                    <TextBlock Text="CenterRight"/>
                </Border>
            </Grid>
            <TextBlock Text="Testing TOP LEFT ALIGNMENT:"/>
            <Border Width="100" Height="100" Background="#DDDDDD">
                <Border HorizontalAlignment="Left" VerticalAlignment="Top" Background="#FFFFFFAA">
                    <TextBlock Text="TopLeft"/>
                </Border>
            </Border>
            <TextBlock Text="Testing BOTTOM RIGHT ALIGNMENT:"/>
            <Border Width="100" Height="100" Background="#DDDDDD">
                <Border HorizontalAlignment="Right" VerticalAlignment="Bottom" Background="#FFAAFFAA">
                    <TextBlock Text="BottomRight"/>
                </Border>
            </Border>
            <TextBlock Text="Testing CENTER ALIGNMENT:"/>
            <Border Width="100" Height="100" Background="#DDDDDD">
                <Border HorizontalAlignment="Center" VerticalAlignment="Center" Background="#FFFFAAAA">
                    <TextBlock Text="Center"/>
                </Border>
            </Border>
            <TextBlock Text="Testing STRECTH ALIGNMENT:"/>
            <Border Width="100" Height="100" Background="#DDDDDD">
                <Border Background="#FFAAFFFF">
                    <!--HorizontalAlignment="Stretch" VerticalAlignment="Stretch"-->
                    <TextBlock Text="Stretch"/>
                </Border>
            </Border>
            <!-- Testing the STACKPANEL -->
            <TextBlock Text="Testing the VERTICAL STACKPANEL:"/>
            <StackPanel Orientation="Vertical" Background="#DDDDDD" HorizontalAlignment="Left">
                <Border Background="#FFFFFFAA" HorizontalAlignment="Stretch" Margin="2">
                    <TextBlock Text="This element is the largest element (Stretch)"/>
                </Border>
                <Border Background="#FFAAFFAA" HorizontalAlignment="Center" Margin="2">
                    <TextBlock Text="This element is centered"/>
                </Border>
                <Border Background="#FFFFAAAA" HorizontalAlignment="Left" Margin="2">
                    <TextBlock Text="This element is left"/>
                </Border>
                <Border Background="#FFFFAAFF" HorizontalAlignment="Right" Margin="2">
                    <TextBlock Text="This element is right"/>
                </Border>
                <Border Background="#FFAAFFFF" HorizontalAlignment="Stretch" Margin="2">
                    <TextBlock Text="This element is stretch"/>
                </Border>
            </StackPanel>
            <TextBlock Text="Testing the HORIZONTAL STACKPANEL:" Margin="0,10,0,0"/>
            <StackPanel Orientation="Horizontal" Background="#DDDDDD">
                <Border Background="#FFFFFFAA" Height="100" VerticalAlignment="Stretch" Margin="2">
                    <TextBlock Text="Longest"/>
                </Border>
                <Border Background="#FFAAFFAA" VerticalAlignment="Center" Margin="2">
                    <TextBlock Text="Vert.Centered 1"/>
                </Border>
                <Border Background="#FFFFAAAA" VerticalAlignment="Top" Margin="2">
                    <TextBlock Text="Top 1"/>
                </Border>
                <Border Background="#FFFFAAFF" VerticalAlignment="Bottom" Margin="2">
                    <TextBlock Text="Bottom 1"/>
                </Border>
                <Border Background="#FFAAFFFF" VerticalAlignment="Stretch" Margin="2">
                    <TextBlock Text="Stretch 1"/>
                </Border>
                <Border Background="#FFFFAAAA" VerticalAlignment="Top" Margin="2">
                    <TextBlock Text="Top 2"/>
                </Border>
                <Border Background="#FFAAFFFF" VerticalAlignment="Stretch" Margin="2">
                    <TextBlock Text="Stretch 2"/>
                </Border>
                <Border Background="#FFAAFFFF" VerticalAlignment="Stretch" Margin="2">
                    <TextBlock Text="Stretch 3"/>
                </Border>
                <Border Background="#FFFFAAFF" VerticalAlignment="Bottom" Margin="2">
                    <TextBlock Text="Bottom 2"/>
                </Border>
                <Border Background="#FFAAFFAA" VerticalAlignment="Center" Margin="2">
                    <TextBlock Text="Vert.Centered 2"/>
                </Border>

            </StackPanel>

            <!-- Testing the ScrollViewer -->
            <TextBlock TextWrapping="Wrap" Text="Testing the SCROLLVIEWER:" Margin="0,10,0,0"/>
            <TextBlock TextWrapping="Wrap" Margin="30,0,0,0" Text="The ellipse is smaller so it should be centered:"/>
            <Border BorderThickness="2" BorderBrush="Black" Width="100" Height="100">
                <ScrollViewer Background="Yellow" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto">
                    <Ellipse Width="50" Height="50" Fill="Red"/>
                </ScrollViewer>
            </Border>
            <TextBlock TextWrapping="Wrap" Margin="30,0,0,0" Text="The ellipse is bigger and the ScrollViewer has a fixed size:"/>
            <Border BorderThickness="2" BorderBrush="Black" Width="100" Height="100">
                <ScrollViewer Background="Yellow" Width="100" Height="100" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto">
                    <Ellipse Width="120" Height="120" Fill="Red"/>
                </ScrollViewer>
            </Border>
            <TextBlock TextWrapping="Wrap" Margin="30,0,0,0" Text="The ellipse is bigger and the the ScrollViewer does not have a fixed size but its Border container does:"/>
            <Border BorderThickness="2" BorderBrush="Black" Width="100" Height="100">
                <ScrollViewer Background="Yellow" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto">
                    <Ellipse Width="120" Height="120" Fill="Red"/>
                </ScrollViewer>
            </Border>
            <TextBlock TextWrapping="Wrap" Margin="30,0,0,0" Text="The ellipse is bigger and the ScrollViewer does not have a fixed size but the outer container does. The Grid contains 2 rows: one star for the ScrollViewer, and one Auto for the footer:"/>
            <Border BorderThickness="2" BorderBrush="Black" Width="100" Height="100">
                <Grid Background="Pink">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <ScrollViewer Grid.Row="0" Background="Yellow" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto">
                        <Ellipse Width="120" Height="120" Fill="Red"/>
                    </ScrollViewer>
                    <Border Grid.Row="1" Height="30" Background="Cyan" Opacity="0.5">
                        <TextBlock Text="Footer"/>
                    </Border>
                </Grid>
            </Border>

            <!-- Testing ShadowDropEffect -->
            <TextBlock Text="Testing the ShadowDropEffect:" Margin="0,10,0,0"/>
            <Border Background="LightGray" BorderBrush="Gray" BorderThickness="2" Margin="10" Padding="5">
                <StackPanel Orientation="Vertical">
                    <TextBlock Text="This TextBlock has a blurred red ShadowDropEffect.">
                        <TextBlock.Effect>
                            <DropShadowEffect Color="Red" BlurRadius="5" Direction="200" ShadowDepth="10"/>
                        </TextBlock.Effect>
                    </TextBlock>
                    <Border Width="100" Height="20" Background="Blue" CornerRadius="10">
                        <Border.Effect>
                            <DropShadowEffect Color="#3300FF00" Opacity="0.5"/>
                        </Border.Effect>
                    </Border>
                </StackPanel>
            </Border>

            <!-- Testing LinearGradientBrush -->
            <TextBlock Text="Testing LinearGradientBrush:" Margin="0,10,0,0"/>
            <Border Background="LightGray" BorderBrush="Gray" BorderThickness="2" Margin="10" Padding="5">
                <StackPanel>
                    <StackPanel Orientation="Horizontal">
                        <StackPanel Orientation="Vertical" Margin="5">
                            <TextBlock Text="Right"/>
                            <Border Width="30" Height="30">
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0,.5" EndPoint="1,.5">
                                        <GradientStopCollection>
                                            <GradientStop Color="Blue"/>
                                            <GradientStop Color="Red" Offset=".3"/>
                                            <GradientStop Color="Green" Offset=".6"/>
                                            <GradientStop Color="Blue" Offset="1"/>
                                        </GradientStopCollection>
                                    </LinearGradientBrush>
                                </Border.Background>
                            </Border>
                        </StackPanel>
                        <StackPanel Orientation="Vertical" Margin="5">
                            <TextBlock Text="Down"/>
                            <Border Width="30" Height="30">
                                <Border.Background>
                                    <LinearGradientBrush StartPoint=".5,0" EndPoint=".5,1">
                                        <GradientStopCollection>
                                            <GradientStop Color="Blue"/>
                                            <GradientStop Color="Red" Offset=".3"/>
                                            <GradientStop Color="Green" Offset=".6"/>
                                            <GradientStop Color="Blue" Offset="1"/>
                                        </GradientStopCollection>
                                    </LinearGradientBrush>
                                </Border.Background>
                            </Border>
                        </StackPanel>
                        <StackPanel Orientation="Vertical" Margin="5">
                            <TextBlock Text="Left"/>
                            <Border Width="30" Height="30">
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="1,.5" EndPoint="0,.5">
                                        <GradientStopCollection>
                                            <GradientStop Color="Blue"/>
                                            <GradientStop Color="Red" Offset=".3"/>
                                            <GradientStop Color="Green" Offset=".6"/>
                                            <GradientStop Color="Blue" Offset="1"/>
                                        </GradientStopCollection>
                                    </LinearGradientBrush>
                                </Border.Background>
                            </Border>
                        </StackPanel>
                        <StackPanel Orientation="Vertical" Margin="5">
                            <TextBlock Text="Up"/>
                            <Border Width="30" Height="30">
                                <Border.Background>
                                    <LinearGradientBrush StartPoint=".5,1" EndPoint=".5,0">
                                        <GradientStopCollection>
                                            <GradientStop Color="Blue"/>
                                            <GradientStop Color="Red" Offset=".3"/>
                                            <GradientStop Color="Green" Offset=".6"/>
                                            <GradientStop Color="Blue" Offset="1"/>
                                        </GradientStopCollection>
                                    </LinearGradientBrush>
                                </Border.Background>
                            </Border>
                        </StackPanel>
                        <StackPanel Orientation="Vertical" Margin="5">
                            <TextBlock Text="Shape 0 deg"/>
                            <Ellipse Width="30" Height="30">
                                <Ellipse.Fill>
                                    <LinearGradientBrush StartPoint="0,.5" EndPoint="1,.5">
                                        <GradientStopCollection>
                                            <GradientStop Color="Blue"/>
                                            <GradientStop Color="Red" Offset=".3"/>
                                            <GradientStop Color="Green" Offset=".6"/>
                                            <GradientStop Color="Blue" Offset="1"/>
                                        </GradientStopCollection>
                                    </LinearGradientBrush>
                                </Ellipse.Fill>
                            </Ellipse>
                        </StackPanel>
                        <StackPanel Orientation="Vertical" Margin="5">
                            <TextBlock Text="45 deg"/>
                            <Ellipse Width="30" Height="30">
                                <Ellipse.Fill>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,1">
                                        <GradientStopCollection>
                                            <GradientStop Color="Blue"/>
                                            <GradientStop Color="Red" Offset=".3"/>
                                            <GradientStop Color="Green" Offset=".6"/>
                                            <GradientStop Color="Blue" Offset="1"/>
                                        </GradientStopCollection>
                                    </LinearGradientBrush>
                                </Ellipse.Fill>
                            </Ellipse>
                        </StackPanel>
                        <StackPanel Orientation="Vertical" Margin="5">
                            <TextBlock Text="(0.5,0) to (1,1)"/>
                            <Ellipse Width="30" Height="30">
                                <Ellipse.Fill>
                                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="1,1">
                                        <GradientStopCollection>
                                            <GradientStop Color="Blue"/>
                                            <GradientStop Color="Red" Offset=".3"/>
                                            <GradientStop Color="Green" Offset=".6"/>
                                            <GradientStop Color="Blue" Offset="1"/>
                                        </GradientStopCollection>
                                    </LinearGradientBrush>
                                </Ellipse.Fill>
                            </Ellipse>
                        </StackPanel>
                        <StackPanel Orientation="Vertical" Margin="5">
                            <TextBlock Text="90 deg"/>
                            <Ellipse Width="30" Height="30">
                                <Ellipse.Fill>
                                    <LinearGradientBrush StartPoint=".5,0" EndPoint=".5,1">
                                        <GradientStopCollection>
                                            <GradientStop Color="Blue"/>
                                            <GradientStop Color="Red" Offset=".3"/>
                                            <GradientStop Color="Green" Offset=".6"/>
                                            <GradientStop Color="Blue" Offset="1"/>
                                        </GradientStopCollection>
                                    </LinearGradientBrush>
                                </Ellipse.Fill>
                            </Ellipse>
                        </StackPanel>
                        <StackPanel Orientation="Vertical" Margin="5">
                            <TextBlock Text="135 deg"/>
                            <Ellipse Width="30" Height="30">
                                <Ellipse.Fill>
                                    <LinearGradientBrush StartPoint="1,0" EndPoint="0,1">
                                        <GradientStopCollection>
                                            <GradientStop Color="Blue"/>
                                            <GradientStop Color="Red" Offset=".3"/>
                                            <GradientStop Color="Green" Offset=".6"/>
                                            <GradientStop Color="Blue" Offset="1"/>
                                        </GradientStopCollection>
                                    </LinearGradientBrush>
                                </Ellipse.Fill>
                            </Ellipse>
                        </StackPanel>
                        <StackPanel Orientation="Vertical" Margin="5">
                            <TextBlock Text="180 deg"/>
                            <Ellipse Width="30" Height="30">
                                <Ellipse.Fill>
                                    <LinearGradientBrush StartPoint="1,.5" EndPoint="0,.5">
                                        <GradientStopCollection>
                                            <GradientStop Color="Blue"/>
                                            <GradientStop Color="Red" Offset=".3"/>
                                            <GradientStop Color="Green" Offset=".6"/>
                                            <GradientStop Color="Blue" Offset="1"/>
                                        </GradientStopCollection>
                                    </LinearGradientBrush>
                                </Ellipse.Fill>
                            </Ellipse>
                        </StackPanel>
                        <StackPanel Orientation="Vertical" Margin="5">
                            <TextBlock Text="225 deg"/>
                            <Ellipse Width="30" Height="30">
                                <Ellipse.Fill>
                                    <LinearGradientBrush StartPoint="1,1" EndPoint="0,0">
                                        <GradientStopCollection>
                                            <GradientStop Color="Blue"/>
                                            <GradientStop Color="Red" Offset=".3"/>
                                            <GradientStop Color="Green" Offset=".6"/>
                                            <GradientStop Color="Blue" Offset="1"/>
                                        </GradientStopCollection>
                                    </LinearGradientBrush>
                                </Ellipse.Fill>
                            </Ellipse>
                        </StackPanel>
                        <StackPanel Orientation="Vertical" Margin="5">
                            <TextBlock Text="270 deg"/>
                            <Ellipse Width="30" Height="30">
                                <Ellipse.Fill>
                                    <LinearGradientBrush StartPoint=".5,1" EndPoint=".5,0">
                                        <GradientStopCollection>
                                            <GradientStop Color="Blue"/>
                                            <GradientStop Color="Red" Offset=".3"/>
                                            <GradientStop Color="Green" Offset=".6"/>
                                            <GradientStop Color="Blue" Offset="1"/>
                                        </GradientStopCollection>
                                    </LinearGradientBrush>
                                </Ellipse.Fill>
                            </Ellipse>
                        </StackPanel>
                        <StackPanel Orientation="Vertical" Margin="5">
                            <TextBlock Text="315 deg"/>
                            <Ellipse Width="30" Height="30">
                                <Ellipse.Fill>
                                    <LinearGradientBrush StartPoint="0,1" EndPoint="1,0">
                                        <GradientStopCollection>
                                            <GradientStop Color="Blue"/>
                                            <GradientStop Color="Red" Offset=".3"/>
                                            <GradientStop Color="Green" Offset=".6"/>
                                            <GradientStop Color="Blue" Offset="1"/>
                                        </GradientStopCollection>
                                    </LinearGradientBrush>
                                </Ellipse.Fill>
                            </Ellipse>
                        </StackPanel>
                    </StackPanel>


                    <StackPanel Orientation="Horizontal">
                        <StackPanel Orientation="Vertical" Margin="5">
                            <TextBlock Text="Border 0 deg"/>
                            <Border Width="30" Height="30">
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0,.5" EndPoint="1,.5">
                                        <GradientStopCollection>
                                            <GradientStop Color="Blue"/>
                                            <GradientStop Color="Red" Offset=".3"/>
                                            <GradientStop Color="Green" Offset=".6"/>
                                            <GradientStop Color="Blue" Offset="1"/>
                                        </GradientStopCollection>
                                    </LinearGradientBrush>
                                </Border.Background>
                            </Border>
                        </StackPanel>
                        <StackPanel Orientation="Vertical" Margin="5">
                            <TextBlock Text="45 deg"/>
                            <Border Width="30" Height="30">
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,1">
                                        <GradientStopCollection>
                                            <GradientStop Color="Blue"/>
                                            <GradientStop Color="Red" Offset=".3"/>
                                            <GradientStop Color="Green" Offset=".6"/>
                                            <GradientStop Color="Blue" Offset="1"/>
                                        </GradientStopCollection>
                                    </LinearGradientBrush>
                                </Border.Background>
                            </Border>
                        </StackPanel>
                        <StackPanel Orientation="Vertical" Margin="5">
                            <TextBlock Text="(0.5,0) to (1,1)"/>
                            <Border Width="30" Height="30">
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="1,1">
                                        <GradientStopCollection>
                                            <GradientStop Color="Blue"/>
                                            <GradientStop Color="Red" Offset=".3"/>
                                            <GradientStop Color="Green" Offset=".6"/>
                                            <GradientStop Color="Blue" Offset="1"/>
                                        </GradientStopCollection>
                                    </LinearGradientBrush>
                                </Border.Background>
                            </Border>
                        </StackPanel>
                        <StackPanel Orientation="Vertical" Margin="5">
                            <TextBlock Text="90 deg"/>
                            <Border Width="30" Height="30">
                                <Border.Background>
                                    <LinearGradientBrush StartPoint=".5,0" EndPoint=".5,1">
                                        <GradientStopCollection>
                                            <GradientStop Color="Blue"/>
                                            <GradientStop Color="Red" Offset=".3"/>
                                            <GradientStop Color="Green" Offset=".6"/>
                                            <GradientStop Color="Blue" Offset="1"/>
                                        </GradientStopCollection>
                                    </LinearGradientBrush>
                                </Border.Background>
                            </Border>
                        </StackPanel>
                        <StackPanel Orientation="Vertical" Margin="5">
                            <TextBlock Text="135 deg"/>
                            <Border Width="30" Height="30">
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="1,0" EndPoint="0,1">
                                        <GradientStopCollection>
                                            <GradientStop Color="Blue"/>
                                            <GradientStop Color="Red" Offset=".3"/>
                                            <GradientStop Color="Green" Offset=".6"/>
                                            <GradientStop Color="Blue" Offset="1"/>
                                        </GradientStopCollection>
                                    </LinearGradientBrush>
                                </Border.Background>
                            </Border>
                        </StackPanel>
                        <StackPanel Orientation="Vertical" Margin="5">
                            <TextBlock Text="180 deg"/>
                            <Border Width="30" Height="30">
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="1,.5" EndPoint="0,.5">
                                        <GradientStopCollection>
                                            <GradientStop Color="Blue"/>
                                            <GradientStop Color="Red" Offset=".3"/>
                                            <GradientStop Color="Green" Offset=".6"/>
                                            <GradientStop Color="Blue" Offset="1"/>
                                        </GradientStopCollection>
                                    </LinearGradientBrush>
                                </Border.Background>
                            </Border>
                        </StackPanel>
                        <StackPanel Orientation="Vertical" Margin="5">
                            <TextBlock Text="225 deg"/>
                            <Border Width="30" Height="30">
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="1,1" EndPoint="0,0">
                                        <GradientStopCollection>
                                            <GradientStop Color="Blue"/>
                                            <GradientStop Color="Red" Offset=".3"/>
                                            <GradientStop Color="Green" Offset=".6"/>
                                            <GradientStop Color="Blue" Offset="1"/>
                                        </GradientStopCollection>
                                    </LinearGradientBrush>
                                </Border.Background>
                            </Border>
                        </StackPanel>
                        <StackPanel Orientation="Vertical" Margin="5">
                            <TextBlock Text="270 deg"/>
                            <Border Width="30" Height="30">
                                <Border.Background>
                                    <LinearGradientBrush StartPoint=".5,1" EndPoint=".5,0">
                                        <GradientStopCollection>
                                            <GradientStop Color="Blue"/>
                                            <GradientStop Color="Red" Offset=".3"/>
                                            <GradientStop Color="Green" Offset=".6"/>
                                            <GradientStop Color="Blue" Offset="1"/>
                                        </GradientStopCollection>
                                    </LinearGradientBrush>
                                </Border.Background>
                            </Border>
                        </StackPanel>
                        <StackPanel Orientation="Vertical" Margin="5">
                            <TextBlock Text="315 deg"/>
                            <Border Width="30" Height="30">
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0,1" EndPoint="1,0">
                                        <GradientStopCollection>
                                            <GradientStop Color="Blue"/>
                                            <GradientStop Color="Red" Offset=".3"/>
                                            <GradientStop Color="Green" Offset=".6"/>
                                            <GradientStop Color="Blue" Offset="1"/>
                                        </GradientStopCollection>
                                    </LinearGradientBrush>
                                </Border.Background>
                            </Border>
                        </StackPanel>
                        <StackPanel Orientation="Vertical" Margin="5">
                            <TextBlock Text="Same start and end"/>
                            <Border Width="30" Height="30">
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0.5,0.5" EndPoint="0.5,0.5">
                                        <GradientStopCollection>
                                            <GradientStop Color="Blue"/>
                                            <GradientStop Color="Red" Offset=".3"/>
                                            <GradientStop Color="Green" Offset=".6"/>
                                            <GradientStop Color="Blue" Offset="1"/>
                                        </GradientStopCollection>
                                    </LinearGradientBrush>
                                </Border.Background>
                            </Border>
                        </StackPanel>
                        <StackPanel Orientation="Vertical" Margin="5">
                            <TextBlock Text="Programmatically"/>
                            <Border x:Name="BorderForLinearGradientBrush" Width="30" Height="30"/>
                        </StackPanel>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal">
                        <StackPanel>
                            <TextBlock Text="SpreadMode.Repeat (Shape)"/>
                            <Rectangle Width="150" Height="75" Stroke="Black" HorizontalAlignment="Left">
                                <Rectangle.Fill>
                                    <LinearGradientBrush StartPoint="0.5,0.6" EndPoint="0.7,0.8" SpreadMethod="Repeat">
                                        <GradientStop Color="White" Offset="0" />
                                        <GradientStop Color="Red" Offset="0.6" />
                                        <GradientStop Color="#333333" Offset="1" />
                                    </LinearGradientBrush>
                                </Rectangle.Fill>
                            </Rectangle>
                        </StackPanel>
                        <StackPanel Margin="10,0,0,0">
                            <TextBlock Text="SpreadMode.Repeat (Border)"/>
                            <Border Width="150" Height="75" BorderBrush="Black" BorderThickness="1" HorizontalAlignment="Left">
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0.5,0.6" EndPoint="0.7,0.8" SpreadMethod="Repeat">
                                        <GradientStop Color="White" Offset="0" />
                                        <GradientStop Color="Red" Offset="0.6" />
                                        <GradientStop Color="#333333" Offset="1" />
                                    </LinearGradientBrush>
                                </Border.Background>
                            </Border>
                        </StackPanel>
                    </StackPanel>
                </StackPanel>
            </Border>


            <!-- Testing RadialGradientBrush -->
            <TextBlock Text="Testing RadialGradientBrush:" Margin="0,10,0,0"/>
            <Border Background="LightGray" BorderBrush="Gray" BorderThickness="2" Margin="10" Padding="5">
                <StackPanel>
                    <TextBlock Text="In Shapes:" Margin="0,10,0,0"/>
                    <TextBlock Text="Note: default: Center=&quot;0.5,0.5&quot; GradientOrigin=&quot;0.5,0.5&quot; RadiusX=&quot;0.5&quot; RadiusY=&quot;0.5&quot; SpreadMethod=&quot;Pad&quot;" Margin="0,10,0,0"/>
                    <StackPanel Orientation="Horizontal">
                        <StackPanel Orientation="Vertical" Margin="5">
                            <TextBlock Text="All default"/>
                            <Rectangle Width="50" Height="50">
                                <Rectangle.Fill>
                                    <RadialGradientBrush Center="0.5,0.5" GradientOrigin="0.5,0.5" RadiusX="0.5" RadiusY="0.5" SpreadMethod="Pad">
                                        <RadialGradientBrush.GradientStops>
                                            <GradientStop Color="Black" Offset="1"/>
                                            <GradientStop Color="Purple" Offset="0.99"/>
                                            <GradientStop Color="Purple" Offset="0.2"/>
                                            <GradientStop Color="White" Offset="0.1"/>
                                            <GradientStop Color="Blue" Offset="0"/>
                                        </RadialGradientBrush.GradientStops>
                                    </RadialGradientBrush>
                                </Rectangle.Fill>
                            </Rectangle>
                        </StackPanel>
                        <StackPanel Orientation="Vertical" Margin="5">
                            <TextBlock Text="Center=&quot;0.5,1&quot;"/>
                            <Rectangle Width="50" Height="50">
                                <Rectangle.Fill>
                                    <RadialGradientBrush Center="0.5,1" GradientOrigin="0.5,0.5" RadiusX="0.5" RadiusY="0.5" SpreadMethod="Pad">
                                        <RadialGradientBrush.GradientStops>
                                            <GradientStop Color="Black" Offset="1"/>
                                            <GradientStop Color="Purple" Offset="0.99"/>
                                            <GradientStop Color="Purple" Offset="0.2"/>
                                            <GradientStop Color="White" Offset="0.1"/>
                                            <GradientStop Color="Blue" Offset="0"/>
                                        </RadialGradientBrush.GradientStops>
                                    </RadialGradientBrush>
                                </Rectangle.Fill>
                            </Rectangle>
                        </StackPanel>
                        <StackPanel Orientation="Vertical" Margin="5">
                            <TextBlock Text="GradientOrigin=&quot;0.5,0.1&quot;"/>
                            <Rectangle Width="50" Height="50">
                                <Rectangle.Fill>
                                    <RadialGradientBrush Center="0.5,0.5" GradientOrigin="0.5,1" RadiusX="0.5" RadiusY="0.5" SpreadMethod="Pad">
                                        <RadialGradientBrush.GradientStops>
                                            <GradientStop Color="Black" Offset="1"/>
                                            <GradientStop Color="Purple" Offset="0.99"/>
                                            <GradientStop Color="Purple" Offset="0.2"/>
                                            <GradientStop Color="White" Offset="0.1"/>
                                            <GradientStop Color="Blue" Offset="0"/>
                                        </RadialGradientBrush.GradientStops>
                                    </RadialGradientBrush>
                                </Rectangle.Fill>
                            </Rectangle>
                        </StackPanel>
                        <StackPanel Orientation="Vertical" Margin="5">
                            <TextBlock Text="RadiusX=&quot;0.7&quot;"/>
                            <Rectangle Width="50" Height="50">
                                <Rectangle.Fill>
                                    <RadialGradientBrush Center="0.5,0.5" GradientOrigin="0.5,0.5" RadiusX="0.7" RadiusY="0.5" SpreadMethod="Pad">
                                        <RadialGradientBrush.GradientStops>
                                            <GradientStop Color="Black" Offset="1"/>
                                            <GradientStop Color="Purple" Offset="0.99"/>
                                            <GradientStop Color="Purple" Offset="0.2"/>
                                            <GradientStop Color="White" Offset="0.1"/>
                                            <GradientStop Color="Blue" Offset="0"/>
                                        </RadialGradientBrush.GradientStops>
                                    </RadialGradientBrush>
                                </Rectangle.Fill>
                            </Rectangle>
                        </StackPanel>
                        <StackPanel Orientation="Vertical" Margin="5">
                            <TextBlock Text="SpreadMethod=&quot;Repeat&quot;"/>
                            <Rectangle Width="50" Height="50">
                                <Rectangle.Fill>
                                    <RadialGradientBrush Center="0.5,0.5" GradientOrigin="0.5,0.5" RadiusX="0.5" RadiusY="0.5" SpreadMethod="Repeat">
                                        <RadialGradientBrush.GradientStops>
                                            <GradientStop Color="Black" Offset="1"/>
                                            <GradientStop Color="Purple" Offset="0.99"/>
                                            <GradientStop Color="Purple" Offset="0.2"/>
                                            <GradientStop Color="White" Offset="0.1"/>
                                            <GradientStop Color="Blue" Offset="0"/>
                                        </RadialGradientBrush.GradientStops>
                                    </RadialGradientBrush>
                                </Rectangle.Fill>
                            </Rectangle>
                        </StackPanel>
                        <StackPanel Orientation="Vertical" Margin="5">
                            <TextBlock Text="Center=&quot;0.3,0.3&quot; GradientOrigin=&quot;0.7,0.7"/>
                            <Rectangle Width="50" Height="50">
                                <Rectangle.Fill>
                                    <RadialGradientBrush Center="0.5,0.5" GradientOrigin="0.5,0.5" RadiusX="0.5" RadiusY="0.5" SpreadMethod="Pad">
                                        <RadialGradientBrush.GradientStops>
                                            <GradientStop Color="Black" Offset="1"/>
                                            <GradientStop Color="Purple" Offset="0.99"/>
                                            <GradientStop Color="Purple" Offset="0.2"/>
                                            <GradientStop Color="White" Offset="0.1"/>
                                            <GradientStop Color="Blue" Offset="0"/>
                                        </RadialGradientBrush.GradientStops>
                                    </RadialGradientBrush>
                                </Rectangle.Fill>
                            </Rectangle>
                        </StackPanel>
                    </StackPanel>
                </StackPanel>
            </Border>








            <!-- Testing Path -->
            <TextBlock Text="Testing Path:" Margin="0,10,0,0"/>
            <Border Background="LightGray" BorderBrush="Gray" BorderThickness="2" Margin="10" Padding="5">
                <StackPanel Orientation="Vertical">
                    <TextBlock Text="Testing MiniLanguage with:"/>
                    <StackPanel Orientation="Horizontal" Margin="10">
                        <StackPanel Orientation="Vertical">
                            <TextBlock Text="Lines:"/>
                            <Path Data="M 10,10 20,0 20,10 L 50,30 50,40 20,40" Stroke="Black" Fill="Red"/>
                            <Path Data="m 10,10 10,-10 0,10 l 30,20 0,10 -30,0" Stroke="Black" Fill="Red"/>
                        </StackPanel>
                        <StackPanel Orientation="Vertical">
                            <TextBlock Text="HVLines:"/>
                            <Path Data="M 10,10 H 50 V 40 H 20 V30" Stroke="Black" Fill="Red"/>
                            <Path Data="M 10,10 h 40 v 30 h -30 v-10" Stroke="Black" Fill="Red"/>
                        </StackPanel>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal" Margin="10">
                        <StackPanel Orientation="Vertical">
                            <TextBlock Text="Cubic Bezier:"/>
                            <Path Data="M 10,10 C 20,0 20,10 50,30 40,50 40,10 10,30" Stroke="Black" Fill="Red"/>
                            <Path Data="M 10,10 c 10,-10 10,0 40,20 -10,20 -10,-20 -40,0" Stroke="Black" Fill="Red"/>
                        </StackPanel>
                        <StackPanel Orientation="Vertical">
                            <TextBlock Text="Smooth Cubic Bezier:"/>
                            <Path Data="M 10,10 S 20,10 50,30 40,-10 10,30" Stroke="Black" Fill="Red"/>
                            <Path Data="M 10,10 s 10,0 40,20 -10,-40 -40,0" Stroke="Black" Fill="Red"/>
                        </StackPanel>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal" Margin="10">
                        <StackPanel Orientation="Vertical">
                            <TextBlock Text="Quadratic Bezier:"/>
                            <Path Data="M 10,10 Q 20,10 50,30 40,-10 10,30" Stroke="Black" Fill="Red"/>
                            <Path Data="M 10,10 q 10,0 40,20 -10,-40 -40,0" Stroke="Black" Fill="Red"/>
                        </StackPanel>
                        <StackPanel Orientation="Vertical">
                            <TextBlock Text="Smooth Quadratic Bezier:"/>
                            <Path Data="M 10,10 T  50,30  20,40 50,10" Stroke="Black" Fill="Red"/>
                            <Path Data="M 10,10 t  40,20  -30,10 30,-30" Stroke="Black" Fill="Red"/>
                        </StackPanel>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal" Margin="10">
                        <StackPanel Orientation="Vertical">
                            <TextBlock Text="Arc:"/>
                            <Path Data="M 10,10 A 20 50 30 0 0 30 40" Stroke="Black" Fill="Red"/>
                            <Path Data="M 10,10 a 20 50 30 0 0 20 30" Stroke="Black" Fill="Red"/>
                        </StackPanel>
                        <StackPanel Orientation="Horizontal" Margin="10">
                            <StackPanel Orientation="Vertical">
                                <TextBlock Text="multiple figures:"/>
                                <Path Data="M 10,10 20,0 20,10 L 50,30 50,40 20,40 M 20,20 40,35 H 26 " Stroke="Black" Fill="Red"/>
                                <Path Data="m 10,10 10,-10 0,10 l 30,20 0,10 -30,0 Z m 10,10 20,15 h -14 Z" Stroke="Black" Fill="Red"/>
                            </StackPanel>
                            <StackPanel Orientation="Vertical">
                                <TextBlock Text="fill style:"/>
                                <Path Data="F0 M 10,10 20,0 20,10 L 50,30 50,40 20,40 Z M 20,20 40,35 H 26 Z" Stroke="Black" Fill="Red"/>
                                <Path Data="F1 m 10,10 10,-10 0,10 l 30,20 0,10 -30,0 Z m 10,10 20,15 h -14 Z" Stroke="Black" Fill="Red"/>
                            </StackPanel>
                        </StackPanel>
                    </StackPanel>
                </StackPanel>
            </Border>

            <TextBlock Text="Testing Path changes:" Margin="0,10,0,0"/>
            <Border Background="LightGray" BorderBrush="Gray" BorderThickness="2" Margin="10" Padding="5">
                <StackPanel Orientation="Vertical">
                    <Canvas Width="300" Height="200" Background="Ivory">
                        <Rectangle Fill="LightBlue" Width="{Binding ElementName=path1, Path=Width}" Height="{Binding ElementName=path1, Path=Height}" Stroke="Black" StrokeThickness="1"/>
                        <Path x:Name="path1"
                      Width="200"
                      Height="100"
                      Stroke="Black"
                      Fill="Gray"
                      StrokeThickness="2"
                      Stretch="Uniform"
                    Data="M 10,100 L 10,300 300,-200 300,100">
                        </Path>
                    </Canvas>
                    <!--SLDISABLED-->
                    <!--<Button Content="Redraw" Click="RedrawPath_Click"/>-->
                    <tk:WrapPanel Orientation="Horizontal">
                        <Button Content="Width" Click="TestChangePathWidth_Click" Margin="2"/>
                        <Button Content="Height" Click="TestChangePathHeight_Click" Margin="2"/>
                        <Button Content="Fill" Click="TestChangePathFill_Click" Margin="2"/>
                        <Button Content="Stretch" Click="TestChangePathStretch_Click" Margin="2"/>
                        <Button Content="Stroke" Click="TestChangePathStroke_Click" Margin="2"/>
                        <Button Content="StrokeThickness" Click="TestChangePathStrokeThickness_Click" Margin="2"/>
                    </tk:WrapPanel>
                    <StackPanel Orientation="Horizontal">
                        <Button Content="EllipseGeometry" Click="TestEllipseGeometry_Click" Margin="2"/>
                        <Button Content="LineGeometry" Click="TestLineGeometry_Click" Margin="2"/>
                        <Button Content="PathGeometry" Click="TestPathGeometry_Click" Margin="2"/>
                    </StackPanel>
                    <tk:WrapPanel x:Name="EllipseGeometryButtons" Visibility="Collapsed">
                        <Button Content="Center" Click="TestEllipseCenter_Click" Margin="2"/>
                        <Button Content="RadiusX" Click="TestEllipseRadiusX_Click" Margin="2"/>
                        <Button Content="RadiusY" Click="TestEllipseRadiusY_Click" Margin="2"/>
                    </tk:WrapPanel>
                    <tk:WrapPanel x:Name="LineGeometryButtons" Visibility="Collapsed">
                        <Button Content="StartPoint" Click="TestLineStartPoint_Click" Margin="2"/>
                        <Button Content="EndPoint" Click="TestLineEndPoint_Click" Margin="2"/>
                    </tk:WrapPanel>
                    <tk:WrapPanel x:Name="PathGeometryButtons" Visibility="Collapsed">
                        <Button Content="FillRule" Click="TestPathFillRule_Click" Margin="2"/>
                        <Button Content="IsClosed" Click="TestPathIsClosed_Click" Margin="2"/>
                        <Button Content="IsFilled" Click="TestPathIsFilled_Click" Margin="2"/>
                        <Button Content="StartPoint" Click="TestPathStartPoint_Click" Margin="2"/>
                    </tk:WrapPanel>
                    <tk:WrapPanel x:Name="PathGeometrySegmentTypeButtons" Visibility="Collapsed">
                        <Button Content="Arc" Click="TestPathArc_Click" Margin="2"/>
                        <Button Content="Line" Click="TestPathLine_Click" Margin="2"/>
                        <Button Content="Bezier" Click="TestPathBezier_Click" Margin="2"/>
                        <Button Content="QuadraticBezier" Click="TestPathQuadratic_Click" Margin="2"/>
                        <Button Content="PolyLine" Click="TestPathPolyLine_Click" Margin="2"/>
                        <Button Content="PolyBezier" Click="TestPathPolyBezier_Click" Margin="2"/>
                        <Button Content="PolyQuadraticBezier" Click="TestPathPolyQuadratic_Click" Margin="2"/>
                    </tk:WrapPanel>
                    <tk:WrapPanel x:Name="PathArcButtons" Visibility="Collapsed">
                        <Button Content="Arc IsLargeArc" Click="TestArcSegmentIsLargeArc_Click" Margin="2"/>
                        <Button Content="Arc Point" Click="TestArcSegmentPoint_Click" Margin="2"/>
                        <Button Content="Arc RotationAngle" Click="TestArcSegmentRotationAngle_Click" Margin="2"/>
                        <Button Content="Arc Size" Click="TestArcSegmentSize_Click" Margin="2"/>
                        <Button Content="Arc SweepDirection" Click="TestArcSegmentSweepDirection_Click" Margin="2"/>
                    </tk:WrapPanel>
                    <tk:WrapPanel x:Name="PathBezierButtons" Visibility="Collapsed">
                        <Button Content="Bezier Point1" Click="TestBezierPoint1_Click" Margin="2"/>
                        <Button Content="Bezier Point2" Click="TestBezierPoint2_Click" Margin="2"/>
                        <Button Content="Bezier Point3" Click="TestBezierPoint3_Click" Margin="2"/>
                    </tk:WrapPanel>
                    <tk:WrapPanel x:Name="PathLineButtons" Visibility="Collapsed">
                        <Button Content="line Point" Click="TestLinePoint_Click" Margin="2"/>
                    </tk:WrapPanel>
                    <tk:WrapPanel x:Name="PathPolyBezierButtons" Visibility="Collapsed">
                        <Button Content="PolyBezierSegment Points" Click="TestPolyBezierSegmentPoints_Click" Margin="2"/>
                    </tk:WrapPanel>
                    <tk:WrapPanel x:Name="PathPolyLineButtons" Visibility="Collapsed">
                        <Button Content="PolyLineSegment Points" Click="TestPolyLineSegmentPoints_Click" Margin="2"/>
                    </tk:WrapPanel>
                    <tk:WrapPanel x:Name="PathPolyQuadraticButtons" Visibility="Collapsed">
                        <Button Content="PolyQuadraticBezierSegment Points" Click="TestPolyQuadraticBezierSegmentPoints_Click" Margin="2"/>
                    </tk:WrapPanel>
                    <tk:WrapPanel x:Name="PathQuadraticButtons" Visibility="Collapsed">
                        <Button Content="QuadraticBezier Point1" Click="TestQuadraticBezierPoint1_Click" Margin="2"/>
                        <Button Content="QuadraticBezier Point2" Click="TestQuadraticBezierPoint2_Click" Margin="2"/>
                    </tk:WrapPanel>
                </StackPanel>
            </Border>

            <!-- Testing Styles -->
            <TextBlock Text="Testing Styles:" Margin="0,10,0,0"/>
            <Border Background="LightGray" BorderBrush="Gray" BorderThickness="2" Margin="10" Padding="5">
                <StackPanel Orientation="Vertical">
                    <TextBlock x:Name="MyTextBlockForStyle1" Text="This TextBlock has a style that defines Fontsize, Background and Foreground." TextWrapping="Wrap"/>
                    <TextBlock x:Name="MyTextBlockForStyle2" Text="This TextBlock has a style based on the first one, with a different Foreground." TextWrapping="Wrap"/>
                    <TextBlock Text="This TextBlock has a Style with a Binding on Background." Style="{StaticResource StyleTestForBinding}" TextWrapping="Wrap"/>
                    <!--SLDISABLED-->
                    <!--<TextBlock x:Name="MyTextBlockForStyle3" Text="This TextBlock has the same style as the first TextBlock, with a local value for the Background" Background="Black" TextWrapping="Wrap"/>-->
                    <TextBlock x:Name="MyTextBlockForStyle3" Text="This TextBlock has the same style as the first TextBlock, with a local value for the Background" TextWrapping="Wrap"/>
                    <!--SLDISABLED-->
                    <!--<TextBlock Text="This TextBlock has the same style as the third TextBlock, with a local value for the Background" Style="{StaticResource StyleTestForBinding}" Background="Yellow" TextWrapping="Wrap"/>-->
                    <TextBlock Text="This TextBlock has the same style as the third TextBlock, with a local value for the Background" Style="{StaticResource StyleTestForBinding}" TextWrapping="Wrap"/>
                    <Button Background="LightGray" BorderBrush="Gray" BorderThickness="1" Click="ButtonTestChangeInStyles_Click">
                        <TextBlock Text="Click here to change the value in the setters for the first two styles and the value in the ViewModel for the third." TextWrapping="Wrap"/>
                    </Button>
                </StackPanel>
            </Border>


            <!-- Testing ListBox -->
            <TextBlock Text="Testing ListBox:" Margin="0,10,0,0"/>
            <Border Background="LightGray" BorderBrush="Gray" BorderThickness="2" Margin="10" Padding="5">
                <StackPanel Orientation="Horizontal">
                    <StackPanel Name="StackPanelForSingle">
                        <TextBlock Text="SelectionMode=Single"/>
                        <ListBox SelectionMode="Single" Name="ListBoxSingle" BorderThickness="1" BorderBrush="Black">
                            <ListBoxItem>Item 1</ListBoxItem>
                            <ListBoxItem>Item 2</ListBoxItem>
                            <ListBoxItem>Item 3</ListBoxItem>
                            <ListBoxItem>Item 4</ListBoxItem>
                            <ListBoxItem>Item 5</ListBoxItem>
                        </ListBox>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="SelectedItem:"/>
                            <TextBox Text="{Binding ElementName=ListBoxSingle, Path=SelectedItem, Mode=TwoWay}" Margin="5,0,0,0" MinWidth="20"/>
                        </StackPanel>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="SelectedValue:"/>
                            <TextBox Text="{Binding ElementName=ListBoxSingle, Path=SelectedValue, Mode=TwoWay}" Margin="5,0,0,0" MinWidth="20"/>
                        </StackPanel>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="SelectedIndex:"/>
                            <TextBox Text="{Binding ElementName=ListBoxSingle, Path=SelectedIndex, Mode=TwoWay}" Margin="5,0,0,0" MinWidth="20"/>
                        </StackPanel>
                    </StackPanel>
                    <StackPanel Name="StackPanelForMultiple" Margin="15,0,0,0">
                        <TextBlock Text="SelectionMode=Multiple"/>
                        <ListBox SelectionMode="Multiple" Name="ListBoxMultiple" BorderThickness="1" BorderBrush="Black">
                            <ListBoxItem>Item 1</ListBoxItem>
                            <ListBoxItem>Item 2</ListBoxItem>
                            <ListBoxItem>Item 3</ListBoxItem>
                            <ListBoxItem>Item 4</ListBoxItem>
                            <ListBoxItem>Item 5</ListBoxItem>
                        </ListBox>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="SelectedItem:"/>
                            <TextBox Text="{Binding ElementName=ListBoxMultiple, Path=SelectedItem, Mode=TwoWay}" Margin="5,0,0,0" MinWidth="20"/>
                        </StackPanel>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="SelectedValue:"/>
                            <TextBox Text="{Binding ElementName=ListBoxMultiple, Path=SelectedValue, Mode=TwoWay}" Margin="5,0,0,0" MinWidth="20"/>
                        </StackPanel>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="SelectedIndex:"/>
                            <TextBox Text="{Binding ElementName=ListBoxMultiple, Path=SelectedIndex, Mode=TwoWay}" Margin="5,0,0,0" MinWidth="20"/>
                        </StackPanel>
                    </StackPanel>
                    <StackPanel Name="StackPanelForExtended" Margin="15,0,0,0">
                        <TextBlock Text="SelectionMode=Extended"/>
                        <ListBox SelectionMode="Extended" Name="ListBoxExtended" BorderThickness="1" BorderBrush="Black">
                            <ListBoxItem>Item 1</ListBoxItem>
                            <ListBoxItem>Item 2</ListBoxItem>
                            <ListBoxItem>Item 3</ListBoxItem>
                            <ListBoxItem>Item 4</ListBoxItem>
                            <ListBoxItem>Item 5</ListBoxItem>
                        </ListBox>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="SelectedItem:"/>
                            <TextBox Text="{Binding ElementName=ListBoxExtended, Path=SelectedItem, Mode=TwoWay}" Margin="5,0,0,0" MinWidth="20"/>
                        </StackPanel>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="SelectedValue:"/>
                            <TextBox Text="{Binding ElementName=ListBoxExtended, Path=SelectedValue, Mode=TwoWay}" Margin="5,0,0,0" MinWidth="20"/>
                        </StackPanel>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="SelectedIndex:"/>
                            <TextBox Text="{Binding ElementName=ListBoxExtended, Path=SelectedIndex, Mode=TwoWay}" Margin="5,0,0,0" MinWidth="20"/>
                        </StackPanel>
                    </StackPanel>
                </StackPanel>
            </Border>

            <!-- Testing IsolatedStorage -->
            <TextBlock Text="Testing the isolated storage:" Margin="0,10,0,0"/>

            <Border Background="LightGray" BorderBrush="Gray" BorderThickness="2" Margin="10" Padding="5">
                <StackPanel Orientation="Vertical">
                    <Border BorderBrush="White" BorderThickness="1">
                        <StackPanel Orientation="Vertical">
                            <TextBlock Text="Testing IsolatedStorageFile:" Margin="0,0,0,10"/>
                            <TextBlock Text="Path to the file in the IsolatedStorage:"/>
                            <TextBox Text="MyFilePath" x:Name="TextBoxWithIsolatedStorageFilePath"/>
                            <TextBlock Text="TextBox containing the text of the file to add to the IsolatedStorage:"/>
                            <TextBox Text="Hello World!" x:Name="TextBoxWithNewTextForIsolatedStorage" Canvas.Left="20" Canvas.Top="30"/>
                            <Button Content="Save to isolatedStorage" Click="ButtonSaveToIsolatedStorage_Click"/>
                            <Button Content="Load from isolated storage" Click="ButtonLoadFromIsolatedStorage_Click"/>
                            <Button Content="Delete from isolated storage" Click="ButtonDeleteFromIsolatedStorage_Click"/>
                            <TextBlock Name="TextBlockWithLoadedText" Text="This TextBlock will contain the Text loaded from the IsolatedStorage"/>
                        </StackPanel>
                    </Border>
                    <Border BorderBrush="White" BorderThickness="1" Margin="0,10,0,0">
                        <StackPanel Orientation="Vertical">
                            <TextBlock Text="Testing IsolatedStorageSettings:" Margin="0,0,0,10"/>
                            <StackPanel Orientation="Horizontal">
                                <TextBlock Text="Key:"/>
                                <TextBox Text="My Key" x:Name="TextBoxWithIsolatedStorageSettingsKey"/>
                            </StackPanel>
                            <StackPanel Orientation="Horizontal">
                                <TextBlock Text="Value associated to the key:"/>
                                <TextBox Text="My Value" x:Name="TextBoxWithIsolatedStorageSettingsValue" Canvas.Left="20" Canvas.Top="30"/>
                            </StackPanel>
                            <Button Content="Save to isolatedStorage" Click="ButtonSaveToIsolatedStorageSettings_Click"/>
                            <Button Content="Save to isolatedStorage using 'Add'" Click="ButtonSaveToIsolatedStorageSettingsWithAdd_Click"/>
                            <Button Content="Remove from isolated storage" Click="ButtonRemoveFromIsolatedStorageSettings_Click"/>
                            <Button Content="Load from isolated storage" Click="ButtonLoadFromIsolatedStorageSettings_Click"/>
                            <Button Content="Load from isolated storage (using TryGetValue)" Click="ButtonLoadFromIsolatedStorageUsingTryGetValue_Click"/>
                            <StackPanel Orientation="Horizontal">
                                <TextBlock Text="Amount of elements in local storage settings:"/>
                                <TextBlock Name="TextBlockWithIsolatedStorageSettingsElementsCount" Text="Click 'Load from isolated storage'" Margin="5,0,0,0"/>
                            </StackPanel>
                            <StackPanel Orientation="Horizontal">
                                <TextBlock Text="Elements in LocalStorageSettings at last Load:"/>
                                <TextBlock Name="TextBlockWithIsolatedStorageSettingsElements" Text="Click 'Load from isolated storage'" Margin="5,0,0,0"/>
                            </StackPanel>
                            <TextBlock Name="TextBlockWithIsolatedStorageSettingsLoadedText" Text="This TextBlock will contain the Text loaded from the IsolatedStorageSettings"/>
                        </StackPanel>
                    </Border>
                </StackPanel>
            </Border>

            <!-- Testing FileInfo -->
            <TextBlock Text="Testing FileInfo:" Margin="0,10,0,0"/>
            <Border Background="LightGray" BorderBrush="Gray" BorderThickness="2" Margin="10" Padding="5">
                <StackPanel Orientation="Vertical">
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="Input text:"/>
                        <TextBox x:Name="InputTextBox"/>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="Input file:"/>
                        <TextBox x:Name="FileNameTextBox"/>
                    </StackPanel>
                    <Button Content="Set file content"  Background="White" BorderBrush="Gray" BorderThickness="1" Click="Button_FileInfo_SetFileContent_Click"/>
                    <Button Content="Get file content"  Background="White" BorderBrush="Gray" BorderThickness="1" Click="Button_FileInfo_GetFileContent_Click"/>
                    <Button Content="Remove file"  Background="White" BorderBrush="Gray" BorderThickness="1" Click="Button_FileInfo_RemoveFile_Click"/>
                    <TextBlock x:Name="ResultTextBlock" Text="Result"/>
                </StackPanel>
            </Border>

            <!-- Testing Encoding.GetDecoder() -->
            <TextBlock Text="Testing Encoding.GetDecoder():" Margin="0,10,0,0"/>
            <TextBlock Text="Input Decimal values (&lt;255) corresponding to your characters UTF8 Format, each byte separated by commas:"/>
            <StackPanel Orientation="Horizontal">
                <TextBlock Text="For a list of those values, see"/>
                <HyperlinkButton Content="here" NavigateUri="http://www.utf8-chartable.de/unicode-utf8-table.pl?utf8=dec" Foreground="Blue" Margin="3,0,0,0"/>
            </StackPanel>
            <Border Background="LightGray" BorderBrush="Gray" BorderThickness="2" Margin="10" Padding="5">
                <StackPanel Orientation="Vertical">
                    <TextBlock Text="Testing Decoder:"/>
                    <TextBox x:Name="TestDecoderTextBox"/>
                    <TextBlock x:Name="TestDecoderTextBlock"/>
                    <Button Content="Test Decoder" Click="ButtonTestDecoder_Click"/>
                </StackPanel>
            </Border>

            <!-- Testing DataGrid -->
            <TextBlock Text="Testing DataGrid:" Margin="0,10,0,0"/>
            <!--SLDISABLED-->
            <!--<StackPanel Orientation="Horizontal">
                <Button Content="Test DataGrid" Click="ButtonTestDataGrid_Click" BorderBrush="Gray" BorderThickness="1" HorizontalAlignment="Left" Margin="2"/>
                <Button Content="Clear DataGrids" Click="ButtonClearDataGrid_Click" BorderBrush="Gray" BorderThickness="1" HorizontalAlignment="Left" Margin="2"/>
            </StackPanel>
            <Border Background="LightGray" BorderBrush="Gray" BorderThickness="2" Margin="10" Padding="5">
                <StackPanel Orientation="Vertical">
                    <Border Background="White" BorderBrush="Black" BorderThickness="2" Padding="5" Margin="2">
                        <StackPanel Orientation="Vertical">
                            <TextBlock Text="Initial list of cats:" TextWrapping="Wrap"/>
                            <DataGrid x:Name="InitialDataGrid" AutoGenerateColumns="False">
                                <DataGrid.ColumnHeaderStyle>
                                    <Style TargetType="DataGridColumnHeader">
                                        <Setter Property="Foreground" Value="Orange"/>
                                    </Style>
                                </DataGrid.ColumnHeaderStyle>
                                <DataGrid.Columns>
                                    <DataGridTemplateColumn Header="Cat">
                                        <DataGridTemplateColumn.CellTemplate>
                                            <DataTemplate>
                                                <StackPanel Orientation="Horizontal">
                                                    <TextBlock Text="{Binding Name}" Margin="0,0,5,0"/>
                                                    <TextBlock Text="{Binding Age}"/>
                                                </StackPanel>
                                            </DataTemplate>
                                        </DataGridTemplateColumn.CellTemplate>
                                    </DataGridTemplateColumn>
                                </DataGrid.Columns>
                            </DataGrid>
                        </StackPanel>
                    </Border>
                    <Border Background="White" BorderBrush="Black" BorderThickness="2" Padding="5" Margin="2">
                        <StackPanel Orientation="Vertical">
                            <TextBlock Text="ItemsSource (before adding the DataGrid to the visual tree), then we added a cat named &quot;Bob&quot;:" TextWrapping="Wrap"/>
                            <Border x:Name="DataGridItemsSourceBeforeAddingThenAddingCatContainer"/>
                        </StackPanel>
                    </Border>
                    <Border Background="White" BorderBrush="Black" BorderThickness="2" Padding="5" Margin="2">
                        <StackPanel Orientation="Vertical">
                            <TextBlock Text="ItemsSource (after DataGrid.Loaded), then removed the cat named &quot;Blacky&quot;:" TextWrapping="Wrap"/>
                            <Border x:Name="DataGridItemsSourceAfterLoadedThenRemovingCatContainer"/>
                        </StackPanel>
                    </Border>
                    <Border Background="White" BorderBrush="Black" BorderThickness="2" Padding="5" Margin="2">
                        <StackPanel Orientation="Vertical">
                            <TextBlock Text="Items (before adding the DataGrid to the visual tree), then we added a cat named &quot;Fluffy&quot;:" TextWrapping="Wrap"/>
                            <Border x:Name="DataGridItemsBeforeAddingThenAddingCatContainer"/>
                        </StackPanel>
                    </Border>
                    <Border Background="White" BorderBrush="Black" BorderThickness="2" Padding="5" Margin="2">
                        <StackPanel Orientation="Vertical">
                            <TextBlock Text="Items (after DataGrid.Loaded), then removed the cat named &quot;Tom&quot;:" TextWrapping="Wrap"/>
                            <Border x:Name="DataGridItemsAfterLoadedThenRemovingCatContainer"/>
                        </StackPanel>
                    </Border>
                </StackPanel>
            </Border>-->

            <!-- Testing DataGridColumn.Visibility -->
            <TextBlock Text="Testing DataGridColumn.Visibility:" Margin="0,10,0,0"/>
            <!--SLDISABLED-->
            <!--<StackPanel Orientation="Horizontal">
                <Button Content="Test" Click="ButtonTestDataGridColumnVisibility_Click" BorderBrush="Gray" BorderThickness="1" HorizontalAlignment="Left" Margin="2"/>
            </StackPanel>
            <Border Background="LightGray" BorderBrush="Gray" BorderThickness="2" Margin="10" Padding="5">
                <StackPanel Orientation="Vertical">
                    <Border Background="White" BorderBrush="Black" BorderThickness="2" Padding="5" Margin="2">
                        <StackPanel Orientation="Vertical">
                            <TextBlock Text="DataGrid:" TextWrapping="Wrap"/>
                            <DataGrid x:Name="DataGridForColumnVisibility" AutoGenerateColumns="False">
                                <DataGrid.ColumnHeaderStyle>
                                    <Style TargetType="DataGridColumnHeader">
                                        <Setter Property="Foreground" Value="Orange"/>
                                    </Style>
                                </DataGrid.ColumnHeaderStyle>
                                <DataGrid.Columns>
                                    <DataGridTextColumn Header="Name" x:Name="NameDataGridColumn" Binding="{Binding Name}"/>
                                    <DataGridTextColumn Header="Age" x:Name="AgeDataGridColumn" Binding="{Binding Age}"/>
                                </DataGrid.Columns>
                            </DataGrid>
                        </StackPanel>
                    </Border>
                </StackPanel>
            </Border>-->

            <!-- Testing ICommand -->
            <TextBlock Text="Testing ICommand:" Margin="0,10,0,0"/>
            <Border Background="LightGray" BorderBrush="Gray" BorderThickness="2" Margin="10" Padding="5">
                <StackPanel Orientation="Vertical">
                    <ComboBox x:Name="MyComboBoxForICommand" SelectionChanged="MyComboBoxForICommand_SelectionChanged"/>
                    <Button Content="Test ICommand out of Button!" Background="LightBlue" Click="ButtonTestICommand_Click"/>
                    <TextBox x:Name="MessageTextTextBox"  Text="Some text!" Margin="0,5,0,0"/>
                    <ComboBox x:Name="MyComboBoxForCommandTest" SelectionChanged="ComboBoxForCommandTest_SelectionChanged"/>
                    <Button x:Name="MyButtonForTestCommand" Content="Test command" Background="LightBlue" CommandParameter="{Binding ElementName=MessageTextTextBox, Path=Text}"/>
                    <TextBlock x:Name="MessageTextBlock" Text="This TextBlock will contain the message."/>
                </StackPanel>
            </Border>

            <!-- Testing Validation -->
            <TextBlock Text="Testing Validation:" Margin="0,10,0,0"/>
            <Border x:Name="ValidationBorder" Background="LightGray" BorderBrush="Gray" BorderThickness="2" Margin="10" Padding="5">
                <StackPanel Orientation="Vertical">
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="Name: "/>
                        <TextBox x:Name="NameTextBoxForValidation" Text="{Binding Name, Mode=TwoWay, NotifyOnValidationError=True, ValidatesOnExceptions=True}" BindingValidationError="ValidationBorder_BindingValidationError" HorizontalAlignment="Left"/>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="Age: "/>
                        <TextBox x:Name="AgeTextBoxForValidation" Text="{Binding Age, Mode=TwoWay, NotifyOnValidationError=True, ValidatesOnExceptions=True}" BindingValidationError="ValidationBorder_BindingValidationError" HorizontalAlignment="Left"/>
                    </StackPanel>
                    <Button x:Name="MyButtonForValidation" Content="OK" Background="LightBlue" Click="MyButtonForValidation_Click"/>
                </StackPanel>
            </Border>


            <!-- Testing MediaElement -->
            <TextBlock Text="Testing MediaElement:"/>
            <MediaElement Source="https://www.w3schools.com/html/mov_bbb.mp4" AutoPlay="False"/>

            <!-- Testing Video Player -->
            <!--SLDISABLED-->
            <!--<local:VideoPlayerControl Source="https://www.w3schools.com/html/mov_bbb.mp4"/>-->

            <!-- Testing composite controls -->
            <TextBlock Text="Testing COMPOSITE CONTROLS:"/>
            <!--SLDISABLED-->
            <!--<local:SampleHeaderedContainer Header="This is the Header">
                <local:SampleHeaderedContainer.Body>
                    <TextBlock Text="This is the Body"/>
                </local:SampleHeaderedContainer.Body>
            </local:SampleHeaderedContainer>-->

            <!-- Testing NESTED ELEMENTS -->
            <TextBlock Text="Testing NESTED ELEMENTS:"/>
            <Border Width="200" Background="#DDDDDD">
                <StackPanel Orientation="Vertical" Margin="20,20,0,0">
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="First Name: "/>
                        <TextBox x:Name="TextBox1" Width="100" Background="#FFFFFFAA"  GotFocus="TextBlock_GotFocus" LostFocus="TextBlock_LostFocus"/>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal" Margin="0,10,0,0">
                        <TextBlock Text="Family Name: "/>
                        <TextBox Width="100" Background="#FFFFFFAA" Margin="4,0,0,0"/>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="Category: "/>
                        <StackPanel Orientation="Vertical">
                            <Canvas Width="80" Height="24" Background="#FFAAFFAA">
                                <TextBlock Canvas.Left="0" Text="X" Margin="30,0,0,0"/>
                                <TextBlock Canvas.Left="10" Text="Category1"/>
                            </Canvas>
                            <Canvas Width="80" Height="24" Background="#FFFFAAAA">
                                <TextBlock Canvas.Left="0" Text="X"/>
                                <TextBlock Canvas.Left="10" Text="Category2"/>
                            </Canvas>
                        </StackPanel>
                    </StackPanel>
                    <Button Content="OK" Background="#FFAAFFFF" Click="ButtonOK_Click"/>
                </StackPanel>
            </Border>
            <!--Testing Printing-->
            <TextBlock Text="Testing Printing" FontSize="16"/>
            <!--SLDISABLED-->
            <!--<Border Width="200" Height="200" Background="LightGray">
                <DockPanel x:Name="ElementToPrint">
                    <Border DockPanel.Dock="Left" Width="50" Background="Blue" CornerRadius="2" Margin="2"/>
                    <Border DockPanel.Dock="Top" Height="50" Background="Red" CornerRadius="2" Margin="2"/>
                    <Border DockPanel.Dock="Right" Width="50" Background="Green" CornerRadius="2" Margin="2"/>
                    <Border DockPanel.Dock="Bottom" Height="50" Background="Orange" CornerRadius="2" Margin="2"/>
                    <Border DockPanel.Dock="Left" Width="50" Background="Purple" CornerRadius="2" Margin="2"/>
                    <Border Background="Pink" CornerRadius="2" Margin="2"/>
                </DockPanel>
            </Border>
            <Button Content="Print the above DockPanel in full-screen" Click="ButtonPrint_SpecificElement_Click"/>
            <Button Content="Show the print dialog" Click="ButtonPrint_ShowDialog_Click"/>
            <Button Content="Set the print area to be the DockPanel above" Click="ButtonPrint_SetPrintArea_Click"/>
            <Button Content="Reset the print area to the default one" Click="ButtonPrint_ResetPrintArea_Click"/>
            <Button Content="Print an element that is not in the Visual Tree" Click="ButtonPrint_InMemoryElement_Click"/>-->
            
            <!--Testing Text properties-->
            <TextBlock Text="Testing Text properties: (FontFamily is Segoe UI)" FontSize="16"/>
            <StackPanel Orientation="Vertical" Background="White">
                <!--
                <TextBlock Text="FontWeight = Thin" FontWeight="Thin" FontFamily="Segoe UI" FontSize="30"/>
                <TextBlock Text="FontWeight = ExtraLight" FontWeight="ExtraLight" FontFamily="Segoe UI" FontSize="30"/>
                <TextBlock Text="FontWeight = UltraLight (same as ExtraLight)" FontWeight="UltraLight" FontFamily="Segoe UI" FontSize="30"/>
                <TextBlock Text="FontWeight = Light" FontWeight="Light" FontFamily="Segoe UI" FontSize="30"/>
                <TextBlock Text="FontWeight = SemiLight" FontWeight="SemiLight" FontFamily="Segoe UI" FontSize="30"/>
                <TextBlock Text="FontWeight = Normal" FontWeight="Normal" FontFamily="Segoe UI" FontSize="30"/>
                <TextBlock Text="FontWeight = Regular(same as Normal)" FontWeight="Regular" FontFamily="Segoe UI" FontSize="30"/>
                <TextBlock Text="FontWeight = Medium" FontWeight="Medium" FontFamily="Segoe UI" FontSize="30"/>
                <TextBlock Text="FontWeight = SemiBold" FontWeight="SemiBold" FontFamily="Segoe UI" FontSize="30"/>
                <TextBlock Text="FontWeight = DemiBold(same as SemiBold)" FontWeight="DemiBold" FontFamily="Segoe UI" FontSize="30"/>
                <TextBlock Text="FontWeight = Bold" FontWeight="Bold" FontFamily="Segoe UI" FontSize="30"/>
                <TextBlock Text="FontWeight = ExtraBold" FontWeight="ExtraBold" FontFamily="Segoe UI" FontSize="30"/>
                <TextBlock Text="FontWeight = UltraBold(same as Extrabold)" FontWeight="UltraBold" FontFamily="Segoe UI" FontSize="30"/>
                <TextBlock Text="FontWeight = Black" FontWeight="Black" FontFamily="Segoe UI" FontSize="30"/>
                <TextBlock Text="FontWeight = Heavy(same as Black)" FontWeight="Heavy" FontFamily="Segoe UI" FontSize="30"/>
                <TextBlock Text="FontWeight = ExtraBlack" FontWeight="ExtraBlack" FontFamily="Segoe UI" FontSize="30"/>
                <TextBlock Text="FontWeight = UltraBlack(same as ExtraBlack)" FontWeight="UltraBlack" FontFamily="Segoe UI" FontSize="30"/>
                -->
            </StackPanel>
            <TextBlock Text="Testing fonts precedence:"/>
            <StackPanel>
                <TextBlock Text="Hello World! (default)" FontSize="40"/>
                <TextBlock Text="Hello World! (Segoe UI)" FontFamily="Segoe UI" FontSize="40"/>
                <TextBlock Text="Hello World! (DejaVu Sans)" FontFamily="DejaVu Sans" FontSize="40"/>
                <TextBlock Text="Hello World! (Verdana)" FontFamily="Verdana"  FontSize="37"/>
                <TextBlock Text="Hello World! (Lucida)" FontFamily="Lucida"  FontSize="41"/>
                <TextBlock Text="Hello World! (MS Sans Serif)" FontFamily="MS Sans Serif"  FontSize="41"/>
                <TextBlock Text="Hello World! (sans-serif)" FontFamily="sans-serif"  FontSize="41"/>
                <TextBlock Text="EXCLUDED:" FontFamily="Lucida Grande" FontSize="14" FontWeight="Bold"/>
                <TextBlock Text="Hello World! (Lucida Grande)" FontFamily="Lucida Grande"/>
                <TextBlock Text="Hello World! (Helvetica)" FontFamily="Helvetica"/>
                <TextBlock Text="Hello World! (Helvetica Neue)" FontFamily="Helvetica Neue"/>
            </StackPanel>
            <!--Testing Async/Await-->
            <TextBlock Text="Testing Async/Await:"/>
            <!--SLDISABLED-->
            <!--<StackPanel Orientation="Vertical" Background="White">
                <Button Content="Normal call of async method" BorderThickness="5" BorderBrush="Red" FontWeight="600"  Background="White" Click="Button_Click"/>
                <Button Content="Awaited call of async method" BorderThickness="5" BorderBrush="Red" FontWeight="600"  Background="White" Click="Button2_Click"/>
                <TextBlock x:Name="TextBlock2" Text="Results here" Margin="20,30, 0,0"/>
            </StackPanel>-->
            <!-- Testing IMAGE -->
            <TextBlock Text="Testing IMAGE CONTROL:"/>
            <ScrollViewer Width="300" Height="400" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Auto">
                <StackPanel Orientation="Vertical">
                    <TextBlock Text="Testing IMAGE with size contraint:"/>
                    <TextBlock Text="  Stretch=None:"/>
                    <Image Source="ms-appx:/Images/Logo1.png" Width="300" Height="100" Stretch="None"/>
                    <TextBlock Text="  Stretch=Fill:"/>
                    <Image Source="ms-appx:/Images/Logo1.png" Width="300" Height="100" Stretch="Fill"/>
                    <TextBlock Text="  Stretch=UniformToFill:"/>
                    <Image Source="ms-appx:/Images/Logo1.png" Width="300" Height="100" Stretch="UniformToFill"/>
                    <TextBlock Text="  Stretch=Uniform:"/>
                    <Image Source="ms-appx:/Images/Logo1.png" Width="300" Height="100" Stretch="Uniform"/>
                    <TextBlock Text="Testing IMAGE without size contraint:"/>
                    <TextBlock Text="  Stretch=None:"/>
                    <Image Source="ms-appx:/Images/Logo1.png" Stretch="None"/>
                    <TextBlock Text="  Stretch=Fill:"/>
                    <Image Source="ms-appx:/Images/Logo1.png" Stretch="Fill"/>
                    <TextBlock Text="  Stretch=UniformToFill:"/>
                    <Image Source="ms-appx:/Images/Logo1.png" Stretch="UniformToFill"/>
                    <TextBlock Text="  Stretch=Uniform:"/>
                    <Image Source="ms-appx:/Images/Logo1.png" Stretch="Uniform"/>
                    <TextBlock Text="Image contained in a fixed size control:"/>
                    <Border Width="50" Height="50">
                        <Image Source="ms-appx:/Images/Logo1.png" Stretch="Fill"/>
                    </Border>
                    <TextBlock Text="Image coming from http:"/>
                    <Image Source="http://cshtml5.com/images/CSharpXamlForHtml5_logo_100x100.png" Width="200" Height="200" Stretch="Fill"/>
                </StackPanel>
            </ScrollViewer>
            <!-- Testing CUSTOM CONTROL -->
            <TextBlock Text="Testing CUSTOM CONTROL:"/>
            <local:MyCustomImageControl Width="200" Height="200" Source="http://cshtml5.com/images/CSharpXamlForHtml5_logo_100x100.png"/>
            <!-- Testing GRID WITHOUT COLUMNS/ROWS -->
            <!--<TextBlock Text="Testing GRID WITHOUT COLUMNS/ROWS:"/>
            <Grid Width="200" Height="300" Background="#DDDDDD">
                <Border Background="#FFFFFFAA" VerticalAlignment="Center" HorizontalAlignment="Left">
                    <TextBlock Text="Left"/>
                </Border>
                <Border Background="#FFAAFFAA" VerticalAlignment="Center" HorizontalAlignment="Right">
                    <TextBlock Text="Right"/>
                </Border>
                <Border Background="#FFFFAAAA" VerticalAlignment="Top" HorizontalAlignment="Center">
                    <TextBlock Text="Top"/>
                </Border>
                <Border Background="#FFFFAAFF" VerticalAlignment="Bottom" HorizontalAlignment="Center">
                    <TextBlock Text="Bottom"/>
                </Border>
            </Grid>-->
            <!-- Controls Showcase -->
            <TextBlock Text="CONTROLS SHOWCASE:"/>
            <StackPanel Orientation="Vertical">
                <StackPanel Orientation="Horizontal">
                    <StackPanel Orientation="Vertical">
                        <Button Content="Standard controls" Click="StandardControlsButton_Click" Background="#FFAAFFAA"/>
                        <Button Content="Panels" Click="PanelsButton_Click" Background="#FFFFFFAA"/>
                    </StackPanel>
                    <StackPanel x:Name="ControlsArea" Orientation="Vertical"/>
                </StackPanel>
            </StackPanel>
            <TextBlock Text="TESTING (DE)SERIALIZATION:"/>
            <Button Content="Serialize" Click="ButtonSerialize_Click" Background="#FFDDDDDD"/>
            <Button Content="Deserialize" Click="ButtonDeserialize_Click" Background="#FFDDDDDD"/>
            <Border Background="#FFAAAAAA">
                <TextBlock x:Name="SerializationResult" Height="40" />
            </Border>
            <TextBlock Text="----Testing TextChanged event (plus initial text):----" Margin="0,10,0,0" TextWrapping="Wrap"/>
            <TextBox TextChanged="TextBox_TextChanged" Text="Initial text"/>
            <TextBlock Text="----Testing TextBox binding (with line returns):----" Margin="0,10,0,0" TextWrapping="Wrap"/>
            <TextBox Name="TextBoxSource" AcceptsReturn="True"/>
            <TextBlock Text="result:" Margin="0,10,0,0"/>
            <TextBlock Text="{Binding ElementName=TextBoxSource, Path=Text}"/>
            <TextBlock Text="----Testing two textboxes one near the other horizontally (issue on FF when multi line):----" Margin="0,10,0,0" TextWrapping="Wrap"/>
            <StackPanel Orientation="Horizontal" >
                <TextBlock Text="TXT1:" />
                <TextBox Width="60" AcceptsReturn="True"/>
                <TextBlock Text="TXT2:" />
                <TextBox Width="60" AcceptsReturn="True"/>
            </StackPanel>
            <TextBlock Text="----Testing lost focus and got focus:----" Margin="0,10,0,0"/>
            <StackPanel Orientation="Horizontal" >
                <TextBlock Text="LOST FOCUS:"/>
                <TextBox x:Name="FocusTextBox1" Width="60" LostFocus="FocusTextBox1_LostFocus" />
                <TextBlock Text="GOT FOCUS:" />
                <TextBox x:Name="FocusTextBox2" Width="60" GotFocus="FocusTextBox2_GotFocus"/>
            </StackPanel>
            <TextBlock x:Name="FocusTextBlockLog" Text="log:" Margin="0,0,0,0"/>
            <TextBlock Text="----Testing the TEXTBOX PROPERTIES:----" Margin="0,10,0,0"/>
            <TextBlock Text="- No alignment set (should stretch horizontally, and auto-size vertically), single line whatever happens:" TextWrapping="Wrap" Margin="0,10,0,0"/>
            <TextBox/>
            <TextBlock Text="- Same with AcceptsReturn true" TextWrapping="Wrap" Margin="0,10,0,0"/>
            <TextBox AcceptsReturn="True"/>
            <TextBlock Text="- Left alignment, no size set, no AcceptsReturn:" TextWrapping="Wrap" Margin="0,10,0,0"/>
            <TextBox x:Name="TextBoxForWrapping" HorizontalAlignment="Left"/>
            <CheckBox x:Name="CheckBoxForWrapping" Content="Option: Wrap text above" IsChecked="True" Checked="CheckBoxForWrapping_Checked" Unchecked="CheckBoxForWrapping_Unchecked"/>
            <TextBlock Text="- Left alignment, fixed size (width 100px height 50px), no AcceptsReturn:"  TextWrapping="Wrap" Margin="0,10,0,0"/>
            <TextBox HorizontalAlignment="Left" Width="100" Height="50"/>
            <TextBlock Text="- Left alignment, fixed size (width 100px height 50px), accepts return true, textwrap:" TextWrapping="Wrap" Margin="0,10,0,0"/>
            <TextBox HorizontalAlignment="Left" Width="100" Height="50" AcceptsReturn="True" TextWrapping="Wrap"/>
            <TextBlock Text="- Left alignment, fixed size (width 100px height 50px), accepts return true, nowrap:" TextWrapping="Wrap" Margin="0,10,0,0"/>
            <TextBox HorizontalAlignment="Left" Width="100" Height="50" AcceptsReturn="True" TextWrapping="NoWrap"/>
            <TextBlock Text="- Left alignment, fixed size (width 100px height 50px), accepts return true, nowrap, both scrollbars visible" TextWrapping="Wrap" Margin="0,10,0,0"/>
            <TextBox HorizontalAlignment="Left" Width="100" Height="50" AcceptsReturn="True" TextWrapping="NoWrap" VerticalScrollBarVisibility="Visible" HorizontalScrollBarVisibility="Visible"/>
            <TextBlock Text="At the time of writing, for a better user experience (because result is unfortunately not perfectly identical) the TextBox in CSHTML5 has the following difference compared to that of WPF: TextWrapping is Wrap by default." TextWrapping="Wrap" Width="400" Margin="0,10,0,0"/>
        </StackPanel>
    </ScrollViewer>
</UserControl>
