<!--
/*===================================================================================
*
*   Copyright (c) Userware (OpenSilver.net, CSHTML5.com)
*
*   This file is part of both OpenSilver Compiler (https://opensilver.net), which
*   is licensed under the MIT license (https://opensource.org/licenses/MIT), and the
*   CSHTML5 Compiler (http://cshtml5.com), which is dual-licensed (MIT + commercial).
*
*   As stated in the MIT license, "the above copyright notice and this permission
*   notice shall be included in all copies or substantial portions of the Software."
*
\*====================================================================================*/
-->

<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <UsingTask TaskName="ReadXmlAndGetItemGroupChildren"
             TaskFactory="RoslynCodeTaskFactory"
             AssemblyFile="$(MSBuildBinPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <ProjectPath ParameterType="System.String" Required="true" />
      <AllItemsAsString ParameterType="System.String" Required="true" />
      <AllIncludes ParameterType="System.String[]" Output="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System" />
      <Using Namespace="System.Collections.Generic" />
      <Using Namespace="System.Xml" />
      <Code Type="Fragment" Language="cs">
		<![CDATA[
            var result = new List<string>();

            var xmlDoc = new XmlDocument();
            xmlDoc.Load(ProjectPath);

            const string xpathExpression = "//ItemGroup/*";
            var topLevelItemGroupChildren = xmlDoc.SelectNodes(xpathExpression);
			
            // When project file uses "<Choose>, <When>" tags, it needs to check include files that passed conditions.
            var passedItems = AllItemsAsString.Split(new char[] { ';' }, StringSplitOptions.RemoveEmptyEntries);

            if (topLevelItemGroupChildren == null)
            {
                AllIncludes = result.ToArray();
                return true;
            }

            // Extract the "Include" attribute value for each selected XmlElement
            foreach (var node in topLevelItemGroupChildren)
            {
                if (node is XmlElement element)
                {
                    // Check if the element has the "Include" attribute
                    var includeAttribute = element.Attributes["Include"];
                    if ((element.Name == "Compile" || element.Name == "Page" || element.Name == "Content" || element.Name == "ApplicationDefinition") && includeAttribute != null && (includeAttribute.Value.EndsWith(".fs") || includeAttribute.Value.EndsWith(".xaml")))
                    {
                        if (passedItems.Contains(includeAttribute.Value))
                        {
							Log.LogMessage("Custom message: " + includeAttribute.Value);

                            // Add the value of the "Include" attribute to the result list
                            result.Add(includeAttribute.Value);
                        }
                    }
                }
            }				
            AllIncludes = result.ToArray();
        ]]>
      </Code>
    </Task>
  </UsingTask>
    
  <UsingTask TaskName="ChangeInPlaceXamlToGenerated"
			 TaskFactory="RoslynCodeTaskFactory"
			 AssemblyFile="$(MSBuildBinPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <ParamIntermediateOutputPath ParameterType="System.String" Required="true" />
		<ParamIsSecondPass ParameterType="System.Boolean" Required="true" />
		<ParamOutputExtension ParameterType="System.String" Required="true" />
		<OriginalItems ParameterType="System.String[]" Required="true" />
		<UpdatedItems ParameterType="System.String[]" Output="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
            var original = OriginalItems;
            var results = new List<string>();
            foreach(var item in original)
            {
                var xamlIndex = item.IndexOf(".xaml");                    
                if (item.EndsWith(".xaml") && xamlIndex > -1)
                {
                    var fileName = item.Substring(0, xamlIndex);
                    results.Add($"{ParamIntermediateOutputPath}{fileName}.xaml.{(ParamIsSecondPass ? "True" : "False")}.g.{ParamOutputExtension}");
                }
                else
                {
                    results.Add(item);
                }
            }
            UpdatedItems = results.ToArray();
        ]]>
      </Code>
    </Task>
  </UsingTask>
</Project>
