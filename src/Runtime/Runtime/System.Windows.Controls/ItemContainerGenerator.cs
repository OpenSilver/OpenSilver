

/*===================================================================================
* 
*   Copyright (c) Userware/OpenSilver.net
*      
*   This file is part of the OpenSilver Runtime (https://opensilver.net), which is
*   licensed under the MIT license: https://opensource.org/licenses/MIT
*   
*   As stated in the MIT license, "the above copyright notice and this permission
*   notice shall be included in all copies or substantial portions of the Software."
*  
\*====================================================================================*/


using CSHTML5.Internal;
using System;
using System.Collections.Generic;
using System.Collections.Specialized;

#if MIGRATION
using System.Windows.Controls.Primitives;
#else
using Windows.UI.Xaml.Controls.Primitives;
#endif

#if MIGRATION
namespace System.Windows.Controls
#else
namespace Windows.UI.Xaml.Controls
#endif
{
    //------------
    // Note: unlike in .NET, we use the "ItemContainerGenerator" to store both the container (such as ListBoxItem or ComboBoxItem) AND the stuff generated by the DataTemplates.
    //------------

    public partial class ItemContainerGenerator : IRecyclingItemContainerGenerator
    {
        Dictionary<object, List<object>> _itemsToContainers; // Note: this maps each item (for example a string or a business object) to the corresponding element that is added to the visual tree (such a datatemplate) or to the native DOM element in case of native combo box for example. The reason why each single element can be associated to multiple objects is because of Strings and other value types: for example, if two identical strings are added to the ItemsControl, they will be the same key of the dictionary.
        private Dictionary<object, object> _containerToItem = new Dictionary<object, object>(); // This is the reverse of the line above. Used to resolve items from their containers.
        Dictionary<int, object> _containers; //this list is kept to get the index from the container (with minimum work to keep it updated, it might not be the most efficient method perf-wise).

        RangeCollection RealizedElements
        {
            get; set;
        }

        Queue<DependencyObject> Cache
        {
            get; set;
        }

        internal GenerationState GenerationState
        {
            get; set;
        }

        ItemsControl Owner
        {
            get; set;
        }

        Panel Panel
        {
            get { return Owner.Panel; }
        }

        internal ItemContainerGenerator(ItemsControl owner)
        {
            Cache = new Queue<DependencyObject>();
            _containers = new Dictionary<int, object>();
            _itemsToContainers = new Dictionary<object, List<object>>();
            Owner = owner;
            RealizedElements = new RangeCollection();
        }

        /// <summary>
        /// Returns the container corresponding to the specified item.
        /// </summary>
        /// <param name="item">
        /// The item to retrieve the container for.
        /// </param>
        /// <returns>
        /// A container that corresponds to the specified item, if the item has a container
        /// and exists in the collection; otherwise, null.
        /// </returns>
        public DependencyObject ContainerFromItem(object item) //This signature is here to fit the original (Microsoft's) signature for this method.
        {
            return (DependencyObject)INTERNAL_ContainerFromItem(item);
        }

        public object INTERNAL_ContainerFromItem(object item) //Note: this signature is needed (at least) for the native ComboBox. The only difference is that we [do not need to]/[we cannot] cast the result into a DependencyObject
        {
            if (item != null && _itemsToContainers.ContainsKey(item))
            {
                List<object> containersAssociatedToTheItem = _itemsToContainers[item];
                if (containersAssociatedToTheItem != null && containersAssociatedToTheItem.Count > 0)
                {
                    return containersAssociatedToTheItem[0];
                }
                else
                    return null;
            }
            else
                return null;
        }

        /// <summary>
        /// Returns the container at the given index, or null if the index is negative or above the amount of containers.
        /// </summary>
        /// <param name="index">The index at which the container is located.</param>
        /// <returns>The container at the given index, or null if the index is negative or above the amount of containers.</returns>
        public DependencyObject ContainerFromIndex(int index)
        {
            if (index > -1 && _containers.Count > index)
            {
                return (DependencyObject)_containers[index];
            }
            else
                return null;
        }

        public int IndexFromContainer(object container)
        {
            foreach (var pair in _containers)
            {
                if (pair.Value == container)
                    return pair.Key;
            }
            return -1;
        }

        /// <summary>
        /// Removes the container associated to the item.
        /// </summary>
        /// <param name="container">The container to remove.</param>
        /// <param name="correspondingItem">The item that corresponds to the container to remove.</param>
        /// <returns>True if found and removed, false otherwise.</returns>
        public bool INTERNAL_TryUnregisterContainer(object container, object correspondingItem)
        {
            int indexOfContainerInContainerList = IndexFromContainer(container);
            if (indexOfContainerInContainerList != -1)
            {
                _containers.Remove(indexOfContainerInContainerList);

                for (int i = indexOfContainerInContainerList + 1; i < _containers.Count + 1; i++)
                {
                    var ct = _containers[i];
                    _containers.Remove(i);
                    _containers.Add(i - 1, ct);
                }
            }
            if (_itemsToContainers.ContainsKey(correspondingItem))
            {
                List<object> containersAssociatedToTheItem = _itemsToContainers[correspondingItem];
                if (containersAssociatedToTheItem != null)
                {
                    if (containersAssociatedToTheItem.Remove(container))
                    {

                        if (containersAssociatedToTheItem.Count == 0)
                            _itemsToContainers.Remove(correspondingItem);
                        
                        _containerToItem.Remove(container);

                        return true;
                    }
                }
            }

            return false;
        }

        ///// <summary>
        ///// Removes the container at the given position. IMPORTANT NOTE: Contrary to expectations, this method is not as efficient as INTERNAL_TryUnregisterContainer so if given the choice, use that one instead.
        ///// </summary>
        ///// <param name="index">The index of the Container to remove.</param>
        ///// <returns>True if found and removed, false otherwise</returns>
        //public bool INTERNAL_TryUnregisterContainerAt(int index)
        //{
        //    //Note: this method has not been tested yet.
        //    var container = ContainerFromIndex(index);
        //    foreach(object item in _itemsToContainers.Keys)
        //    {
        //        List<object> containersAssociatedToTheItem = _itemsToContainers[item];
        //        if (containersAssociatedToTheItem.Remove(container))
        //        {

        //            if (containersAssociatedToTheItem.Count == 0)
        //                _itemsToContainers.Remove(item);

        //            _containers.Remove(container);
        //            return true;
        //        }
        //    }
        //    return false;
        //}


        /// <summary>
        /// Resets the ItemContainerGenerator.
        /// </summary>
        public void INTERNAL_Clear()
        {
            _itemsToContainers.Clear();
            _containerToItem.Clear();
            _containers.Clear();
            RealizedElements.Clear();
        }


        /// <summary>
        /// Adds a container to the collection of containers.
        /// </summary>
        /// <param name="container">The container to add.</param>
        /// <param name="correspondingItem">The item that corresponds to the container to add.</param>
        public void INTERNAL_RegisterContainer(object container, object correspondingItem)
        {
            List<object> containersAssociatedToTheItem;
            if (_itemsToContainers.ContainsKey(correspondingItem))
            {
                containersAssociatedToTheItem = _itemsToContainers[correspondingItem];
            }
            else
            {
                containersAssociatedToTheItem = new List<object>();
                _itemsToContainers.Add(correspondingItem, containersAssociatedToTheItem);
            }
            containersAssociatedToTheItem.Add(container);
            _containerToItem.Add(container, correspondingItem);
            _containers.Add(_containers.Count, container);
        }

        /// <summary>
        /// Gets all the containers associated to all the items.
        /// </summary>
        public IEnumerable<object> INTERNAL_AllContainers
        {
            get
            {
                foreach (List<object> containers in
#if BRIDGE
                    INTERNAL_BridgeWorkarounds.GetDictionaryValues_SimulatorCompatible(_itemsToContainers)
#else
                    _itemsToContainers.Values
#endif

                    )
                {
                    foreach (object container in containers)
                    {
                        yield return container;
                    }
                }
            }
        }

        /// <summary>
        /// Returns the item that corresponds to the specified, generated container.
        /// </summary>
        /// <param name="container">
        /// The <see cref="DependencyObject"/> that corresponds to the item to be returned.
        /// </param>
        /// <returns>
        /// The contained item, or the container if it does not contain an item.
        /// </returns>
        /// <exception cref="ArgumentNullException">
        /// container is null.
        /// </exception>
        public object ItemFromContainer(DependencyObject container)
        {
            if (container == null)
            {
                throw new ArgumentNullException("container");
            }
            if (_containerToItem.ContainsKey(container))
            {
                return _containerToItem[container];
            }

            return DependencyProperty.UnsetValue;
        }

        public void RemoveAll()
		{
            foreach (var pair in _containerToItem)
                Owner.ClearContainerForItem(pair.Key as DependencyObject, pair.Value);

            _itemsToContainers.Clear();
            _containerToItem.Clear();
            _containers.Clear();
            RealizedElements.Clear();
        }

        void MoveExistingItems(int index, int offset)
        {
            // This is a little horrible. I should really collapse the existing
            // RangeCollection so that every > the current index is decremented by 1.
            // This is easier for now though. I may think of a better way later on.
            RangeCollection newRanges = new RangeCollection();
            List<int> list = new List<int>();
            for (int i = 0; i < RealizedElements.Count; i++)
                list.Add(RealizedElements[i]);

            if (offset > 0)
                list.Reverse();

            foreach (int i in list)
            {
                int oldIndex = i;
                if (oldIndex < index)
                {
                    newRanges.Add(oldIndex);
                }
                else
                {
                    newRanges.Add(oldIndex + offset);
                    var container = _containers[oldIndex];
                    _containers.Remove(oldIndex);
                    _containers.Add(oldIndex + offset, container);
                }
            }

            RealizedElements = newRanges;
        }

        public void Remove(GeneratorPosition position, int count)
        {
            CheckOffsetAndRealized(position, count);

            int index = IndexFromGeneratorPosition(position);
            for (int i = 0; i < count; i++)
            {
                var container = _containers[index + i];
                var item = _containerToItem[container];
                _containers.Remove(index + i);
                _containerToItem.Remove(container);
                RealizedElements.Remove(index + i);
                Owner.ClearContainerForItem(container as DependencyObject, item);
            }
        }

        void CheckOffsetAndRealized(GeneratorPosition position, int count)
        {
            if (position.Offset != 0)
                throw new ArgumentException("position.Offset must be zero as the position must refer to a realized element");

            int index = IndexFromGeneratorPosition(position);
            int rangeIndex = RealizedElements.FindRangeIndexForValue(index);
            RangeCollection.Range range = RealizedElements.Ranges[rangeIndex];
            if (index < range.Start || (index + count) > range.Start + range.Count)
                throw new InvalidOperationException("Only items which have been Realized can be removed");
        }

        public IDisposable StartAt(GeneratorPosition position,
                                 GeneratorDirection direction,
                                 bool allowStartAtRealizedItem)
        {
            if (GenerationState != null)
                throw new InvalidOperationException("Cannot call StartAt while a generation operation is in progress");

            GenerationState = new GenerationState
            {
                AllowStartAtRealizedItem = allowStartAtRealizedItem,
                Direction = direction,
                Position = position,
                Generator = this
            };
            return GenerationState;
        }

        public DependencyObject GenerateNext(out bool isNewlyRealized)
        {
            if (GenerationState == null)
                throw new InvalidOperationException("Cannot call GenerateNext before calling StartAt");

            int index;
            // This is relative to the realised elements.
            int startAt = GenerationState.Position.Index;
            if (startAt == -1)
            {
                if (GenerationState.Position.Offset < 0)
                    index = Owner.Items.Count + GenerationState.Position.Offset;
                else if (GenerationState.Position.Offset == 0)
                    index = 0;
                else
                    index = GenerationState.Position.Offset - 1;
            }
            else if (startAt >= 0 && startAt < RealizedElements.Count)
            {
                // We're starting relative to an already realised element
                index = RealizedElements[startAt] + GenerationState.Position.Offset;
            }
            else
            {
                index = -1;
            }

            bool alreadyRealized = RealizedElements.Contains(index);
            if (!GenerationState.AllowStartAtRealizedItem && alreadyRealized && GenerationState.Position.Offset == 0)
            {
                index += GenerationState.Step;
                alreadyRealized = RealizedElements.Contains(index);
            }

            if (index < 0 || index >= Owner.Items.Count)
            {
                isNewlyRealized = false;
                return null;
            }

            if (alreadyRealized)
            {
                GenerationState.Position = new GeneratorPosition(RealizedElements.IndexOf(index), GenerationState.Step);
                isNewlyRealized = false;

                return _containers[index] as DependencyObject;
            }

            DependencyObject container;
            var item = Owner.Items[index];
            if (Owner.IsItemItsOwnContainer(item))
            {
                container = (DependencyObject)item;
                isNewlyRealized = true;
            }
            else
            {
                if (Cache.Count == 0)
                {
                    container = Owner.GetContainerForItem();
                    isNewlyRealized = true;
                }
                else
                {
                    container = Cache.Dequeue();
                    isNewlyRealized = false;
                }
            }

            FrameworkElement f = container as FrameworkElement;
            if (f != null && !(item is UIElement))
                f.DataContext = item;

            RealizedElements.Add(index);
            _containers.Add(index, container);
            _containerToItem.Add(container, item);

            GenerationState.Position = new GeneratorPosition(RealizedElements.IndexOf(index), GenerationState.Step);
            return container;
        }

        public void PrepareItemContainer(DependencyObject container)
        {
            var index = IndexFromContainer(container);
            var item = Owner.Items[index];

            Owner.PrepareContainerForItem(container, item);
        }

        internal void OnOwnerItemsItemsChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            int itemCount;
            int itemUICount;
            GeneratorPosition oldPosition = new GeneratorPosition(-1, 0);
            GeneratorPosition position;

            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    if ((e.NewStartingIndex + 1) != Owner.Items.Count)
                        MoveExistingItems(e.NewStartingIndex, 1);
                    itemCount = 1;
                    itemUICount = 0;
                    position = GeneratorPositionFromIndex(e.NewStartingIndex);
                    // Yes, this looks like a Silverlight Bug.
                    position.Offset = 1;
                    break;
                case NotifyCollectionChangedAction.Remove:
                    itemCount = 1;
                    itemUICount = RealizedElements.Contains(e.OldStartingIndex) ? 1 : 0;
                    position = GeneratorPositionFromIndex(e.OldStartingIndex);
                    if (itemUICount == 1)
                        Remove(position, 1);
                    MoveExistingItems(e.OldStartingIndex, -1);
                    break;
                case NotifyCollectionChangedAction.Replace:
                    if (!RealizedElements.Contains(e.NewStartingIndex))
                        return;

                    itemCount = 1;
                    itemUICount = 1;
                    position = GeneratorPositionFromIndex(e.NewStartingIndex);
                    Remove(position, 1);

                    bool fresh;
                    var newPos = GeneratorPositionFromIndex(e.NewStartingIndex);
                    using (StartAt(newPos, GeneratorDirection.Forward, true))
                        PrepareItemContainer(GenerateNext(out fresh));
                    break;
                case NotifyCollectionChangedAction.Reset:
                    itemCount = e.OldItems == null ? 0 : e.OldItems.Count;
                    itemUICount = RealizedElements.Count;
                    position = new GeneratorPosition(-1, 0);
                    RemoveAll();
                    break;
                default:
                    Console.WriteLine("*** Critical error in ItemContainerGenerator.OnOwnerItemsItemsChanged. NotifyCollectionChangedAction.{0} is not supported", e.Action);
                    return;
            }

            ItemsChangedEventArgs args = new ItemsChangedEventArgs(e.Action, position, oldPosition, itemCount, itemUICount);
            var h = ItemsChanged;
            if (h != null)
                h(this, args);
        }

        //
        // Summary:
        //     Occurs when the contents of the items collection changes.
        public event ItemsChangedEventHandler ItemsChanged;

        //
        // Summary:
        //     Gets the generated position of the item at the specified index.
        //
        // Parameters:
        //   itemIndex:
        //     The index of the item to retrieve the position of.
        //
        // Returns:
        //     The position of the item as generated by the System.Windows.Controls.ItemContainerGenerator.
        public GeneratorPosition GeneratorPositionFromIndex(int itemIndex)
        {
            if (itemIndex < 0)
            {
                return new GeneratorPosition(-1, 0);
            }
            else if (RealizedElements.Contains(itemIndex))
            {
                return new GeneratorPosition(RealizedElements.IndexOf(itemIndex), 0);
            }
            else if (itemIndex > Owner.Items.Count)
            {
                return new GeneratorPosition(-1, 0);
            }

            if (RealizedElements.Count == 0)
                return new GeneratorPosition(-1, itemIndex + 1);

            int index = -1;
            for (int i = 0; i < RealizedElements.Count; i++)
            {
                if (RealizedElements[i] > itemIndex)
                    break;
                index = i;
            }
            if (index == -1)
            {
                return new GeneratorPosition(index, itemIndex + 1);
            }
            else
            {
                return new GeneratorPosition(index, itemIndex - RealizedElements[index]);
            }
        }
        //
        // Summary:
        //     Returns the index that maps to the specified System.Windows.Controls.Primitives.GeneratorPosition.
        //
        // Parameters:
        //   position:
        //     The System.Windows.Controls.Primitives.GeneratorPosition for the desired index.
        //
        // Returns:
        //     An System.Int32 that is the index which maps to the specified System.Windows.Controls.Primitives.GeneratorPosition.
        public int IndexFromGeneratorPosition(GeneratorPosition position)
        {
            // We either have everything realised or nothing realised, so we can
            // simply just add Index and Offset together to get the right index (i think)
            if (position.Index == -1)
            {
                if (position.Offset < 0)
                    return Owner.Items.Count + position.Offset;
                //else if (position.Offset == 0)
                //	return 0;
                else
                    return position.Offset - 1;
            }
            else
            {
                if (position.Index > Owner.Items.Count)
                    return -1;
                if (position.Index >= 0 && position.Index < RealizedElements.Count)
                    return RealizedElements[position.Index] + position.Offset;
                return position.Index + position.Offset;
            }
        }

        public ItemContainerGenerator GetItemContainerGeneratorForPanel(Panel panel)
        {
            // FIXME: Double check this, but i think it's right
            return panel == Panel ? this : null;
        }

        DependencyObject IItemContainerGenerator.GenerateNext(out bool isNewlyRealized)
        {
            return GenerateNext(out isNewlyRealized);
        }

        ItemContainerGenerator IItemContainerGenerator.GetItemContainerGeneratorForPanel(Panel panel)
        {
            return GetItemContainerGeneratorForPanel(panel);
        }

        void IItemContainerGenerator.PrepareItemContainer(DependencyObject container)
        {
            PrepareItemContainer(container);
        }

        IDisposable IItemContainerGenerator.StartAt(GeneratorPosition position,
                                 GeneratorDirection direction,
                                 bool allowStartAtRealizedItem)
        {
            return StartAt(position, direction, allowStartAtRealizedItem);
        }

        void IItemContainerGenerator.Remove(GeneratorPosition position, int count)
        {
            Remove(position, count);
        }

        void IItemContainerGenerator.RemoveAll()
        {
            RemoveAll();
        }

        internal void Recycle(GeneratorPosition position, int count)
        {
            CheckOffsetAndRealized(position, count);

            int index = IndexFromGeneratorPosition(position);
            for (int i = 0; i < count; i++)
                Cache.Enqueue(_containers[index + i] as DependencyObject);
            Remove(position, count);
        }

        void IRecyclingItemContainerGenerator.Recycle(GeneratorPosition position, int count)
        {
            Recycle(position, count);
        }
    }
}

