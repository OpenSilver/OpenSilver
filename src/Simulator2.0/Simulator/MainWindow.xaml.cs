

/*===================================================================================
* 
*   Copyright (c) Userware (OpenSilver.net, CSHTML5.com)
*      
*   This file is part of both the OpenSilver Simulator (https://opensilver.net), which
*   is licensed under the MIT license (https://opensource.org/licenses/MIT), and the
*   CSHTML5 Simulator (http://cshtml5.com), which is dual-licensed (MIT + commercial).
*   
*   As stated in the MIT license, "the above copyright notice and this permission
*   notice shall be included in all copies or substantial portions of the Software."
*  
\*====================================================================================*/



using System;
using System.IO;
using System.Reflection;
using System.Windows;
using System.Diagnostics;
using MahApps.Metro.Controls;
using System.Windows.Controls;
using System.Globalization;
using OpenSilver.Simulator.XamlInspection;
using Microsoft.Win32;
using DotNetForHtml5.Compiler;
using System.Threading;
using System.Windows.Threading;
using System.Net.NetworkInformation;
using System.Windows.Input;
using System.Windows.Media.Imaging;
using System.Threading.Tasks;

namespace OpenSilver.Simulator
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : MetroWindow
    {
        static readonly TimeSpan TimeAfterWhichToSayThatCompilationisTakingTooLong = new TimeSpan(0, 1, 15);
        DispatcherTimer _timerToInformTheUserIfTheCompilationIsTakingTooLong = new DispatcherTimer();
        static readonly TimeSpan DelayToUpdateThePositionOfTheHighlightAfterResize = new TimeSpan(0, 0, 1);
        public const string ARBITRARY_FILE_NAME_WHEN_RUNNING_FROM_SIMULATOR = "RunningFromSimulator.html";
        public const string TipToCopyToClipboard = "TIP: You can copy the content of this message box by pressing Ctrl+C now.";
        const string NoteWhenUnableToLaunchTheGeneratedHtml = "Note: please look at the \"Output\" pane of Visual Studio for any compilation errors or warnings. We also suggest forcing a Rebuild of your Visual Studio project. If the problem persists, please contact support at: support@cshtml5.com";
        const string COMPILATION_SUCCEEDED_KEYWORD = "COMPILATION SUCCEEDED"; // IMPORTANT: If you change this string, also change the one in the Simulator.
        const string COMPILATION_WARNING_ABOUT_EXECUTEJAVASCRIPT = "a string literal as an argument"; // Note: this is an extract of the warning that is generated by the JSIL compiler when the first argument of the "Interop.ExecuteJavaScript" method is not a string literal. It should be kept in sync with the JSIL source code.
        string _pathOfAssemblyThatContainsEntryPoint;
        bool _htmlHasBeenLoaded = false;
        Assembly _clientAppAssembly;
        Action _clientAppStartup;
        SimulatorLaunchParameters _simulatorLaunchParameters;
        CompilationState _compilationState = CompilationState.Initializing;
        string _compilationLog;
        RootPage _rootPage;
        SimBrowser TheSimBrowser;
        OpenSilverRuntime _OpenSilverRuntime;

        const string NAME_FOR_STORING_COOKIES = "ms_cookies_for_user_application"; // This is an arbitrary name used to store the cookies in the registry

        public MainWindow(Action entryAppCreator, Assembly appAssembly, SimulatorLaunchParameters simulatorLaunchParameters)
        {
            Thread.CurrentThread.CurrentCulture = CultureInfo.InvariantCulture;
            Thread.CurrentThread.CurrentUICulture = CultureInfo.InvariantCulture;

            //Application.Current.DispatcherUnhandledException += App_DispatcherUnhandledException;

            InitializeComponent();
            Instance = this;

            Icon = new BitmapImage(new Uri("pack://application:,,,/OpenSilver.Simulator;component/OpenSilverIcon.ico"));

            Title = "Simulator - OpenSilver";

            WelcomeTextBlock.Visibility = Visibility.Collapsed; // In version 1.x, we do not display the welcome text because there is already a similar text while the JS generation is taking place.
            _clientAppStartup = entryAppCreator ?? throw new ArgumentNullException(nameof(entryAppCreator));
            _simulatorLaunchParameters = simulatorLaunchParameters;
            _clientAppAssembly = appAssembly;
            _pathOfAssemblyThatContainsEntryPoint = _clientAppAssembly.Location;


            //Note: The following line was an attempt to persist the Microsoft login cookies (for use by user applications that required AAD login), but it is no longer necessary because we changed the DotNetBrowser "StorageType" from "MEMORY" to "DISK", so cookies are now automatically persisted.
            //CookiesHelper.LoadMicrosoftCookies(MainWebBrowser, NAME_FOR_STORING_COOKIES);

            TheSimBrowser = SimBrowser.Instance;
            TheSimBrowser.SizeChanged += TheSimBrowser_SizeChanged;

            TheSimBrowser.OnInitialized = () =>
            {
                _OpenSilverRuntime = new OpenSilverRuntime(this, Dispatcher.CurrentDispatcher);
                LoadRootPage();
            };

            TheSimBrowser.OnNavigationCompleted = OnRootPageLoaded;

            BrowserContainer.Child = TheSimBrowser;

            TheSimBrowser.Cookies = simulatorLaunchParameters?.CookiesData;

            if (simulatorLaunchParameters != null && simulatorLaunchParameters.SimulatorHostDomain != null)
                RootPage.SimulatorHostName = simulatorLaunchParameters.SimulatorHostDomain;

            CheckBoxCORS.IsChecked = CrossDomainCallsHelper.IsBypassCORSErrors;
            CheckBoxCORS.Checked += CheckBoxCORS_Checked;
            CheckBoxCORS.Unchecked += CheckBoxCORS_Unchecked;

            LoadDisplaySize();
            _compilationState = CompilationState.Initializing;

            AppDomain.CurrentDomain.AssemblyResolve -= CurrentDomain_AssemblyResolve;
            AppDomain.CurrentDomain.AssemblyResolve += CurrentDomain_AssemblyResolve;

            // Custom load handler to reload the app after redirection, for example in case of authentication scenarios (eg. Azure Active Directory login redirection):
            //NetworkChange.NetworkAvailabilityChanged += MainWindow_NetworkAvailabilityChanged;

            Loaded += MainWindow_Loaded;
            KeyDown += (s, e) => { if (e.Key == Key.F12) TheSimBrowser.CoreWebView2.OpenDevToolsWindow(); };

            ButtonRunInBrowser.Visibility = Visibility.Collapsed;
            CheckBoxUseHttpLocalhost.Visibility = Visibility.Collapsed;
            ButtonSeeOutputFolder.Visibility = Visibility.Collapsed;
            ButtonTestOnDevice.Visibility = Visibility.Collapsed;
            MenuButtonViewCompilationLog.Visibility = Visibility.Collapsed;
            WelcomeTextBlock.Text = "The Simulator below lets you debug in C# using Visual Studio. To view the final web version instead, run the project that ends with .Browser in your solution.";
            WelcomeTextBlock.Visibility = Visibility.Visible;
        }

        void App_DispatcherUnhandledException(object sender, System.Windows.Threading.DispatcherUnhandledExceptionEventArgs e)
        {
            SimulatorProxy.ShowExceptionStatic(e.Exception);
            e.Handled = true;
        }


        Assembly CurrentDomain_AssemblyResolve(object sender, ResolveEventArgs args)
        {
            string assemblyLocalName = args.Name.IndexOf(',') >= 0 ? args.Name.Substring(0, args.Name.IndexOf(',')) : args.Name;

            switch (assemblyLocalName)
            {
                //case Constants.NAME_OF_CORE_ASSEMBLY_USING_BLAZOR:
                case Constants.NAME_OF_CORE_ASSEMBLY_SLMIGRATION_USING_BLAZOR:
                case "OpenSilver.Controls.Data":
                case "OpenSilver.Controls.Data.Input":
                case "OpenSilver.Controls.Data.DataForm.Toolkit":
                case "OpenSilver.Controls.DataVisualization.Toolkit":
                case "OpenSilver.Controls.Navigation":
                case "OpenSilver.Controls.Input":
                case "OpenSilver.Controls.Layout.Toolkit":
                case "OpenSilver.Interactivity":
                case "OpenSilver.Expression.Interactions":
                case "OpenSilver.Expression.Effects":
                    // If specified DLL has absolute path, look in same folder:
                    string pathOfAssemblyThatContainsEntryPoint;
                    string candidatePath;
                    if (ReflectionInUserAssembliesHelper.TryGetPathOfAssemblyThatContainsEntryPoint(out pathOfAssemblyThatContainsEntryPoint))
                    {
                        if (pathOfAssemblyThatContainsEntryPoint.Contains("\\"))
                        {
                            candidatePath = $"{Path.GetDirectoryName(pathOfAssemblyThatContainsEntryPoint)}\\{assemblyLocalName}.dll";
                            return Assembly.LoadFile(candidatePath);
                        }
                    }

                    // Otherwise look in current execution folder:
                    return Assembly.LoadFile($"{assemblyLocalName}.dll");

                default:
                    if (args.RequestingAssembly != null)
                    {
                        string assemblyFileName = $"{assemblyLocalName}.dll";
                        string invariantFullPath = Path.GetFullPath(Path.Combine(Path.GetDirectoryName(args.RequestingAssembly.Location), assemblyFileName));

                        string fullPath;
                        if (!File.Exists(invariantFullPath))
                        {
                            string cultureName = Thread.CurrentThread.CurrentCulture.Name;
                            fullPath = Path.GetFullPath(Path.Combine(Path.GetDirectoryName(args.RequestingAssembly.Location), cultureName, assemblyFileName));
                        }
                        else
                        {
                            fullPath = invariantFullPath;
                        }

                        if (File.Exists(fullPath))
                        {
                            var assembly = Assembly.LoadFile(fullPath);
                            return assembly;
                        }
                        else
                        {
                            throw new FileNotFoundException($"Assembly {assemblyFileName} not found.\nSearched at:\n{invariantFullPath}\n{fullPath}");
                        }
                    }
                    return null;
            }
        }


        #region Events
        async void MainWindow_Loaded(object sender, RoutedEventArgs e)
        {
            IsDevToolsOpened.IsChecked = Properties.Settings.Default.IsDevToolsOpened;

            Width = ScreenCoordinatesHelper.ScreenWidth / 3 * 2;
            Height = ScreenCoordinatesHelper.ScreenHeight / 3 * 2;
            Left = (ScreenCoordinatesHelper.ScreenWidth / 2 - Width / 2) / 2;
            Top = (ScreenCoordinatesHelper.ScreenHeight / 2 - Height / 2) / 2;
        }

        async void TheSimBrowser_SizeChanged(object sender, SizeChangedEventArgs e)
        {
            if (DisplaySize_Desktop.IsChecked == true && _htmlHasBeenLoaded)
            {
                // Apply the size in pixels to the root <div> inside the html page:
                ReflectBrowserSizeOnRootElementSize();
            }
        }

        protected override void OnClosed(EventArgs e)
        {
            base.OnClosed(e);

            //Note: The following line was an attempt to persist the Microsoft login cookies (for use by user applications that required AAD login), but it is no longer necessary because we changed the DotNetBrowser "StorageType" from "MEMORY" to "DISK", so cookies are now automatically persisted.
            //CookiesHelper.SaveMicrosoftCookies(MainWebBrowser, NAME_FOR_STORING_COOKIES);

            // Destroy the WebControl and its underlying view:
            TheSimBrowser.Dispose();

            // Kill the process to avoid having the Simulator process that remains open due to a MessageBox or something else:
            Application.Current.Shutdown();
        }

        protected override void OnRenderSizeChanged(SizeChangedInfo sizeInfo)
        {
            Left = (ScreenCoordinatesHelper.ScreenWidth / 2 - Width / 2) / 2;
            Top = (ScreenCoordinatesHelper.ScreenHeight / 2 - Height / 2) / 2;
        }

        private async void ButtonStats_Click(object sender, RoutedEventArgs e)
        {
            // Count the number of DOM elements:
            var count = await TheSimBrowser.ExecuteScriptAsync(@"document.getElementsByTagName(""*"").length");

            // Display the result
            MessageBox.Show("Number of DOM elements: " + count
                + Environment.NewLine
                + Environment.NewLine
                + "TIPS:"
                + Environment.NewLine
                + Environment.NewLine
                + "- For best performance on mobile devices, be sure to keep the number of DOM elements low by limiting the number of UI Elements in the Visual Tree, and by using only default control templates instead of custom control templates. Also note that scrolling performance is greatly improved when the scroll bar visibility of ScrollViewers is set to 'Visible' rather than 'Auto'."
                + Environment.NewLine
                + Environment.NewLine
                + @"- If a portion of your application requires to display thousands of UI Elements, such as in a custom Chart or Calendar control, or if you need very high performance graphics, for example for games, you may want to use the ""HtmlCanvas"" control. To learn about it, please read:"
                + Environment.NewLine
                + "  http://cshtml5.com/links/how-to-use-the-html5-canvas.aspx"
                + Environment.NewLine
                + Environment.NewLine
                + "- To learn how to profile performance in order to pinpoint performance issues, please read:"
                + "  http://cshtml5.com/links/how-to-profile-performance.aspx"
                );
        }

        private async void ButtonSaveHtml_Click(object sender, RoutedEventArgs e)
        {
            string html = await getHtmlSnapshot();
            SaveFileDialog saveFileDialog = new SaveFileDialog() { FileName = "index.html" };
            if (saveFileDialog.ShowDialog() == true)
                File.WriteAllText(saveFileDialog.FileName, html);
        }

        private void ButtonViewJavaScriptLog_Click(object sender, RoutedEventArgs e)
        {
            string fullLog = _OpenSilverRuntime.JavaScriptExecutionHandler.InteropLog;
            var msgBox = new MessageBoxScrollable()
            {
                Value = fullLog,
                Title = "All JS code executed so far by the Simulator"
            };
            msgBox.Show();
        }

        private void ButtonDebugJavaScriptLog_Click(object sender, RoutedEventArgs e)
        {
#if BRIDGE
            string destinationFolderName = "TempDebugCshtml5";
#elif OPENSILVER
            string destinationFolderName = "TempDebugOpenSilver";
#endif
            string info =
$@"This feature lets you debug the JavaScript code executed by the Simulator so far, which corresponds to the content of the Interop.ExecuteJavaScript(...) calls as well as the JS/C# interop calls that are specific to the Simulator.

A folder named '{destinationFolderName}' will be created on your desktop. The folder will contain a file named 'index.html' and other files. Just open that file with a browser and use the Browser Developer Tools to debug the code. In particular, you can look for errors in the browser Console output, and you can enable the 'Pause on caught exceptions' option in the Developer Tools to step into the code when an error occurs.

Click OK to continue.";
            MessageBoxResult result = MessageBox.Show(info, "Information", MessageBoxButton.OKCancel, MessageBoxImage.Information);
            if (result != MessageBoxResult.Cancel)
            {
                string desktopPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                string destinationPath = Path.Combine(desktopPath, destinationFolderName);

                try
                {
                    // Create the destination folder if it does not already exist:
                    if (!Directory.Exists(destinationPath))
                        Directory.CreateDirectory(destinationPath);

                    // Copy the html file:
                    string simulatorExePath = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);
                    File.Copy(Path.Combine(simulatorExePath, "interop_debug_root.html"), Path.Combine(destinationPath, "index.html"), true);

#if OPENSILVER
                    string simulatorJsCssPath = Path.Combine(simulatorExePath, @"js_css");
#elif BRIDGE
                    string simulatorJsCssPath = Path.Combine(simulatorExePath, @"..\..\js_css");
#endif

                    File.Copy(Path.Combine(simulatorJsCssPath, "cshtml5.css"), Path.Combine(destinationPath, "cshtml5.css"), true);
                    File.Copy(Path.Combine(simulatorJsCssPath, "cshtml5.js"), Path.Combine(destinationPath, "cshtml5.js"), true);
                    File.Copy(Path.Combine(simulatorJsCssPath, "velocity.js"), Path.Combine(destinationPath, "velocity.js"), true);
                    File.Copy(Path.Combine(simulatorJsCssPath, "flatpickr.css"), Path.Combine(destinationPath, "flatpickr.css"), true);
                    File.Copy(Path.Combine(simulatorJsCssPath, "flatpickr.js"), Path.Combine(destinationPath, "flatpickr.js"), true);
                    File.Copy(Path.Combine(simulatorJsCssPath, "ResizeSensor.js"), Path.Combine(destinationPath, "ResizeSensor.js"), true);

                    // Create "interopcalls.js" which contains all the JS executed by the Simulator so far:
                    string fullLog = _OpenSilverRuntime.JavaScriptExecutionHandler.InteropLog;
                    File.WriteAllText(Path.Combine(destinationPath, "interopcalls.js"), fullLog);
                }
                catch (Exception ex)
                {
                    MessageBox.Show("Unable to generate the debug files in the folder:\r\n\r\n" + destinationPath + "\r\n\r\n" + ex.ToString());
                    return;
                }

                // Open the destination folder with Explorer:
                try
                {
                    System.Diagnostics.Process.Start(destinationPath);
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message + "\r\n\r\n" + destinationPath);
                }
            }
        }

        void ButtonRunInBrowser_Click(object sender, RoutedEventArgs e)
        {
            bool runFromLocalhost = CheckBoxUseHttpLocalhost.IsChecked.HasValue && CheckBoxUseHttpLocalhost.IsChecked.Value;

            if (runFromLocalhost)
            {
                //StartWebServer(useLocalhost: true);
            }
            else
            {
                string path = "";
                try
                {
                    path = _rootPage.GetOutputIndexPath();
                    System.Diagnostics.Process.Start(path);
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message + "\r\n\r\n" + path + "\r\n\r\n" + NoteWhenUnableToLaunchTheGeneratedHtml);
                }
            }
        }

        private void ButtonShowAdvancedTools_Click(object sender, System.Windows.Input.MouseButtonEventArgs e)
        {
            ((FrameworkElement)sender).ContextMenu.IsOpen = true;
        }

        void ButtonClearCookiesAndCache_Click(object sender, RoutedEventArgs e)
        {
            CookiesHelper.ClearCookies(TheSimBrowser, NAME_FOR_STORING_COOKIES);
            try
            {
                if (!string.IsNullOrWhiteSpace(TheSimBrowser.CacheFolderName) && Directory.Exists(TheSimBrowser.CacheFolderName))
                {
                    MessageBoxResult result = MessageBox.Show("To fully clear the Simulator cache, please close the Simulator and manually delete the following folder:" + Environment.NewLine + Environment.NewLine + TheSimBrowser.CacheFolderName + Environment.NewLine + Environment.NewLine + "Click OK to see this folder in Windows Explorer.", "Confirm?", MessageBoxButton.OKCancel);
                    if (result == MessageBoxResult.OK)
                    {
                        Process.Start(TheSimBrowser.CacheFolderName);
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString());
            }
        }

        void ButtonSeeOutputFolder_Click(object sender, RoutedEventArgs e)
        {
            string outputPathAbsolute = _rootPage.GetOutputPathAbsoluteAndReadAssemblyAttributes();
            try
            {
                System.Diagnostics.Process.Start(outputPathAbsolute);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message + "\r\n\r\n" + outputPathAbsolute + "\r\n\r\n" + NoteWhenUnableToLaunchTheGeneratedHtml);
            }
        }

        void ButtonTestOnMobileDevices_Click(object sender, RoutedEventArgs e)
        {
            //StartWebServer(useLocalhost: false);
        }

        private void ButtonViewXamlTree_Click(object sender, RoutedEventArgs e)
        {
            if (_clientAppAssembly != null
                && XamlInspectionTree.TryRefresh(_clientAppAssembly, XamlPropertiesPaneInstance))
            {
                MainGridSplitter.Visibility = Visibility.Visible;
                BorderForXamlInspection.Visibility = Visibility.Visible;
                ButtonViewXamlTree.Visibility = Visibility.Collapsed;
                ContainerForXamlInspectorToolbar.Visibility = Visibility.Visible;
                ButtonHideXamlTree.Visibility = Visibility.Visible;

                // We activate the element picker by default:
                StartElementPickerForInspection();
            }
            else
            {
                ButtonHideXamlTree_Click(sender, e);
                MessageBox.Show("The Visual Tree is not available.");
            }
        }

        private void ButtonOpenDevTools_Click(object sender, RoutedEventArgs e)
        {
            TheSimBrowser.CoreWebView2.OpenDevToolsWindow();
        }

        private void ButtonHideXamlTree_Click(object sender, RoutedEventArgs e)
        {
            MainGridSplitter.Visibility = Visibility.Collapsed;
            BorderForXamlInspection.Visibility = Visibility.Collapsed;
            ButtonViewXamlTree.Visibility = Visibility.Visible;
            ContainerForXamlInspectorToolbar.Visibility = Visibility.Collapsed;
            ButtonHideXamlTree.Visibility = Visibility.Collapsed;
            XamlPropertiesPaneInstance.Width = 0;

            // Reset columns in case they were modified by the GridSplitter:
            ColumnForLeftToolbar.Width = GridLength.Auto;
            ColumnForMainWebBrowser.Width = new GridLength(1, GridUnitType.Star);
            ColumnForGridSplitter.Width = GridLength.Auto;
            ColumnForXamlInspection.Width = GridLength.Auto;
            ColumnForXamlPropertiesPane.Width = GridLength.Auto;

            // Ensure that the element picker is not activated:
            StopElementPickerForInspection();
        }

        private void ButtonRefreshXamlTree_Click(object sender, RoutedEventArgs e)
        {
            ButtonViewXamlTree_Click(sender, e);
        }

        void ButtonXamlInspectorOptions_Click(object sender, RoutedEventArgs e)
        {
            ((FrameworkElement)sender).ContextMenu.IsOpen = true;
        }

        void ButtonExpandAllNodes_Click(object sender, RoutedEventArgs e)
        {
            XamlInspectionTree.ExpandAllNodes();
        }

        private void ButtonViewCompilationLog_Click(object sender, RoutedEventArgs e)
        {
            if (_compilationState != CompilationState.Compiling)
            {
                string compilationLog = (_compilationLog ?? "The compilation log is empty. Please contact: support@cshtml5.com");

                var msgBox = new MessageBoxScrollable()
                {
                    Value = compilationLog,
                    Title = "Compilation Log"
                };
                msgBox.Show();
            }
            else
            {
                MessageBox.Show("The compilation is still taking place. Please wait for the compilation to complete and try again.");
            }

        }

        private void ButtonTest_Click(object sender, RoutedEventArgs e)
        {
            if (_OpenSilverRuntime.JavaScriptExecutionHandler == null)
                _OpenSilverRuntime.JavaScriptExecutionHandler = new JavaScriptExecutionHandler();

            dynamic rootElement = _OpenSilverRuntime.JavaScriptExecutionHandler.ExecuteJavaScriptWithResult(@"document.getXamlRoot()");
        }

        private void ButtonLogout_Click(object sender, RoutedEventArgs e)
        {
        }

        private void CheckBoxCORS_Checked(object sender, RoutedEventArgs e)
        {
            CrossDomainCallsHelper.IsBypassCORSErrors = true;
        }

        private void CheckBoxCORS_Unchecked(object sender, RoutedEventArgs e)
        {
            CrossDomainCallsHelper.IsBypassCORSErrors = false;
        }

        private void DisplaySize_Click(object sender, RoutedEventArgs e)
        {
            SaveDisplaySize();
            //UpdateWebBrowserAndWebPageSizeBasedOnCurrentState();
        }

        private void LogInterop_Click(object sender, RoutedEventArgs e)
        {
            if ((bool)LogInterop.IsChecked)
            {
                LogInterop.Content = "Logging Interops...";
                _OpenSilverRuntime.JavaScriptExecutionHandler.ClearInteropLog();
                _OpenSilverRuntime.JavaScriptExecutionHandler.StartInteropLogging();
            }
            else
            {
                _OpenSilverRuntime.JavaScriptExecutionHandler.StopInteropLoggin();
                LogInterop.Content = "Log Interops";
            }
        }

        private void AllowContextMenu_Click(object sender, RoutedEventArgs e)
        {
            TheSimBrowser.AllowDenyContextMenu((bool)AllowContextMenu.IsChecked);
        }

        private void ViewInteropLog_Click(object sender, RoutedEventArgs e)
        {
            var logWin = new Window() { Title = "Interops Log", WindowStartupLocation = WindowStartupLocation.CenterScreen };
            logWin.Content = new TextBox() { Text = _OpenSilverRuntime.JavaScriptExecutionHandler.InteropLog, VerticalScrollBarVisibility = ScrollBarVisibility.Auto };
            logWin.Show();
        }

        private void IsDevToolsOpened_Click(object sender, RoutedEventArgs e)
        {
            Properties.Settings.Default.IsDevToolsOpened = (bool)IsDevToolsOpened.IsChecked;
            Properties.Settings.Default.Save();
        }

        private void RestartSim_Click(object sender, RoutedEventArgs e)
        {
            Process.Start(Application.ResourceAssembly.Location);
            Application.Current.Shutdown();
        }

        #endregion

        void LoadRootPage(string urlFragment = null)
        {
            _rootPage = new RootPage(_clientAppAssembly);
            _rootPage.Create(_simulatorLaunchParameters);
            TheSimBrowser.Source = new Uri(_rootPage.ToUrl());

            //ams> understand ARBITRARY_FILE_NAME_WHEN_RUNNING_FROM_SIMULATOR and fragmentUrl and when and how they are needed
            //MainWebBrowser.Browser.LoadHTML(new LoadHTMLParams(simulatorRootHtml, "UTF-8", "http://cshtml5-simulator/" + ARBITRARY_FILE_NAME_WHEN_RUNNING_FROM_SIMULATOR + urlFragment)); // Note: we set the URL so that the simulator browser can find the JS files.
        }

        void OnRootPageLoaded()
        {
            if (!_htmlHasBeenLoaded)
            {
                _htmlHasBeenLoaded = true;
                //UpdateWebBrowserAndWebPageSizeBasedOnCurrentState();

                // Start the app:
                ShowLoadingMessage();

                bool success = _OpenSilverRuntime.Start(_clientAppStartup);

                if (success)
                {
                    _simulatorLaunchParameters?.AppStartedCallback?.Invoke();
                    HideLoadingMessage();

                    //UpdateWebBrowserAndWebPageSizeBasedOnCurrentState();
                }
            }
        }

        private async Task<string> getHtmlSnapshot(bool osRootOnly = false, string htmlElementId = null, string xamlElementName = null)
        {
            string html;
            if (htmlElementId != null)
            {
                html = await TheSimBrowser.ExecuteScriptAsync($"document.getElementById('{htmlElementId}').outerHTML");
            }
            else if (xamlElementName != null)
            {
                html = await TheSimBrowser.ExecuteScriptAsync($"document.querySelectorAll('[dataid=\"{xamlElementName}\"]')[0].outerHTML");
            }
            else if (osRootOnly)
            {
                html = await TheSimBrowser.ExecuteScriptAsync("document.getElementById('opensilver-root').outerHTML");
            }
            else
            {
                html = await TheSimBrowser.ExecuteScriptAsync("document.documentElement.outerHTML");
            }
            return html ?? "";
        }

        void ReloadAppAfterRedirect(string urlFragment)
        {
            //ams> understand what is redirect
            // Create the HTML DOM MANAGER proxy and pass it to the "Core" project:
            //JSValue htmlDocument = (JSObject)MainWebBrowser.Browser.ExecuteJavaScriptAndReturnValue("document");
            //InteropHelpers.InjectDOMDocument(MainWebBrowser.Browser.GetDocument(), _coreAssembly);
            //InteropHelpers.InjectHtmlDocument(htmlDocument, _coreAssembly);//no need for this line right ?

            // Ensure the static constructor of all common types is called so that the type converters are initialized:
            //StaticConstructorsCaller.EnsureStaticConstructorOfCommonTypesIsCalled(_coreAssembly);

            // We will need to wait for the page to finish loading before executing the app:
            //ams>fix-rethink
            //MainWebBrowser.CoreWebView2.DOMContentLoaded += (s1, e1) =>
            //        {
            //            Dispatcher.BeginInvoke((Action)(async () =>
            //            {
            //                InteropHelpers.RaiseReloadedEvent(_coreAssembly); // to reset some static fields
            //                await Task.Delay(3000); //Note: this is to ensure all the js and css files of simulator_root.html have been loaded (client_fb).
            //                StartApplication();
            //            }));
            //        };

            // Load the page:
            //LoadIndexFile(urlFragment);
        }


        void ShowLoadingMessage()
        {
            ContainerOfLoadingMessage.Visibility = Visibility.Visible;
        }

        public void HideLoadingMessage()
        {
            ContainerOfLoadingMessage.Visibility = Visibility.Collapsed;
        }

        //void SetWebBrowserSize(double width, double height)
        //{
        //    try
        //    {
        //        // We take into account the "Font Size" (DPI) setting of Windows: //cf. http://answers.awesomium.com/questions/321/non-standard-dpi-rendering-is-broken-in-webcontrol.html
        //        double correctedWidth = ScreenCoordinatesHelper.ConvertWidthOrNaNToDpiAwareWidthOrNaN(width);
        //        double correctedHeight = ScreenCoordinatesHelper.ConvertHeightOrNaNToDpiAwareHeightOrNaN(height);
        //        TheSimBrowser.Width = correctedWidth;
        //        TheSimBrowser.Height = correctedHeight;


        //        //ReflectBrowserSizeOnRootElementSize();
        //    }
        //    catch (Exception ex)
        //    {
        //        MessageBox.Show(ex.ToString());
        //    }
        //}

        void ReflectBrowserSizeOnRootElementSize()
        {
            return;
            try
            {
                double width = double.IsNaN(TheSimBrowser.Width) ? TheSimBrowser.ActualWidth : TheSimBrowser.Width;
                double height = double.IsNaN(TheSimBrowser.Height) ? TheSimBrowser.ActualHeight : TheSimBrowser.Height;

                //Take into account screen DPI:
                //width = ScreenCoordinatesHelper.ConvertWidthOrNaNToDpiAwareWidthOrNaN(width, invert: true); // Supports "NaN"
                //height = ScreenCoordinatesHelper.ConvertWidthOrNaNToDpiAwareWidthOrNaN(height, invert: true); // Supports "NaN"

                var widthStr = !double.IsNaN(width) ? width.ToString(CultureInfo.InvariantCulture) + "px" : "100%";
                var heightStr = !double.IsNaN(height) ? height.ToString(CultureInfo.InvariantCulture) + "px" : "100%";

                TheSimBrowser.ExecuteScriptAsync($"var xmlRoot=document.getXamlRoot(); xmlRoot.style.width={widthStr}; xmlRoot.style.height={heightStr}");
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString());
            }
        }

        string _lastExecutedJavaScript = "";

        //public void UpdateWebBrowserAndWebPageSizeBasedOnCurrentState()
        //{
        //    if (DisplaySize_Phone.IsChecked == true)
        //    {
        //        this.ResizeMode = ResizeMode.CanMinimize;
        //        this.SizeToContent = SizeToContent.WidthAndHeight;
        //        //this.MaxHeight = SystemParameters.MaximizedPrimaryScreenHeight - 40; // Prevents the window from growing below the Windows task bar, cf. https://stackoverflow.com/questions/25790674/wpf-scrollbar-on-auto-and-sizetocontent-height-goes-under-windows7-toolbar
        //        OptionsForDisplaySize_Phone.Visibility = Visibility.Visible;
        //        OptionsForDisplaySize_Tablet.Visibility = Visibility.Collapsed;
        //        PhoneDecoration1.Visibility = Visibility.Visible;
        //        PhoneDecoration2.Visibility = Visibility.Visible;
        //        MainBorder.Background = new SolidColorBrush(Color.FromArgb(255, 34, 34, 34));
        //        MainBorder.HorizontalAlignment = HorizontalAlignment.Center;
        //        MainBorder.VerticalAlignment = VerticalAlignment.Top;
        //        MainScrollViewer.HorizontalScrollBarVisibility = ScrollBarVisibility.Auto;
        //        MainScrollViewer.VerticalScrollBarVisibility = ScrollBarVisibility.Auto;

        //        if (DisplaySize_Phone_Landscape.IsChecked == true)
        //        {
        //            SetWebBrowserSize(480, 320);
        //            ContainerForMainWebBrowserAndHighlightElement.Margin = new Thickness(60, 10, 60, 10);
        //        }
        //        else
        //        {
        //            SetWebBrowserSize(320, 480);
        //            ContainerForMainWebBrowserAndHighlightElement.Margin = new Thickness(10, 60, 10, 60);
        //        }
        //    }
        //    else if (DisplaySize_Tablet.IsChecked == true)
        //    {
        //        this.ResizeMode = ResizeMode.CanMinimize;
        //        this.SizeToContent = SizeToContent.WidthAndHeight;
        //        this.MaxHeight = SystemParameters.MaximizedPrimaryScreenHeight - 40; // Prevents the window from growing below the Windows task bar, cf. https://stackoverflow.com/questions/25790674/wpf-scrollbar-on-auto-and-sizetocontent-height-goes-under-windows7-toolbar
        //        OptionsForDisplaySize_Phone.Visibility = Visibility.Collapsed;
        //        OptionsForDisplaySize_Tablet.Visibility = Visibility.Visible;
        //        PhoneDecoration1.Visibility = Visibility.Visible;
        //        PhoneDecoration2.Visibility = Visibility.Visible;
        //        MainBorder.Background = new SolidColorBrush(Color.FromArgb(255, 34, 34, 34));
        //        MainBorder.HorizontalAlignment = HorizontalAlignment.Center;
        //        MainBorder.VerticalAlignment = VerticalAlignment.Top;
        //        MainScrollViewer.HorizontalScrollBarVisibility = ScrollBarVisibility.Auto;
        //        MainScrollViewer.VerticalScrollBarVisibility = ScrollBarVisibility.Auto;

        //        if (DisplaySize_Tablet_Landscape.IsChecked == true)
        //        {
        //            SetWebBrowserSize(1024, 768);
        //            ContainerForMainWebBrowserAndHighlightElement.Margin = new Thickness(60, 10, 60, 10);
        //        }
        //        else
        //        {
        //            SetWebBrowserSize(768, 1024);
        //            ContainerForMainWebBrowserAndHighlightElement.Margin = new Thickness(10, 60, 10, 60);
        //        }
        //    }
        //    else if (DisplaySize_Desktop.IsChecked == true)
        //    {
        //        this.ResizeMode = ResizeMode.CanResizeWithGrip;
        //        this.SizeToContent = SizeToContent.Manual;
        //        this.MaxHeight = double.PositiveInfinity;
        //        OptionsForDisplaySize_Phone.Visibility = Visibility.Collapsed;
        //        OptionsForDisplaySize_Tablet.Visibility = Visibility.Collapsed;
        //        PhoneDecoration1.Visibility = Visibility.Collapsed;
        //        PhoneDecoration2.Visibility = Visibility.Collapsed;
        //        MainBorder.Background = new SolidColorBrush(Colors.Transparent);
        //        MainBorder.HorizontalAlignment = HorizontalAlignment.Stretch;
        //        MainBorder.VerticalAlignment = VerticalAlignment.Stretch;
        //        MainScrollViewer.HorizontalScrollBarVisibility = ScrollBarVisibility.Disabled;
        //        MainScrollViewer.VerticalScrollBarVisibility = ScrollBarVisibility.Disabled;

        //        SetWebBrowserSize(double.NaN, double.NaN);
        //        ContainerForMainWebBrowserAndHighlightElement.Margin = new Thickness(0, 0, 0, 0);
        //        this.Width = ScreenCoordinatesHelper.ScreenWidth;
        //        this.Height = ScreenCoordinatesHelper.ScreenHeight;
        //    }
        //    else
        //    {
        //        MessageBox.Show("Error: no display size selected. Please report this error to the authors.");
        //    }
        //}

        void SaveDisplaySize()
        {
            //-----------
            // Display size (Phone, Tablet, or Desktop)
            //-----------
            int displaySize = 0;
            if (DisplaySize_Phone.IsChecked == true)
                displaySize = 0;
            else if (DisplaySize_Tablet.IsChecked == true)
                displaySize = 1;
            else if (DisplaySize_Desktop.IsChecked == true)
                displaySize = 2;
            Properties.Settings.Default.DisplaySize = displaySize;

            //-----------
            // Phone orientation (Portrait or Landscape)
            //-----------
            int displaySize_Phone_Orientation = 0;
            if (DisplaySize_Phone_Portrait.IsChecked == true)
                displaySize_Phone_Orientation = 0;
            else if (DisplaySize_Phone_Landscape.IsChecked == true)
                displaySize_Phone_Orientation = 1;
            Properties.Settings.Default.DisplaySize_Phone_Orientation = displaySize_Phone_Orientation;

            //-----------
            // Tablet orientation (Portrait or Landscape)
            //-----------
            int displaySize_Tablet_Orientation = 0;
            if (DisplaySize_Tablet_Portrait.IsChecked == true)
                displaySize_Tablet_Orientation = 0;
            else if (DisplaySize_Tablet_Landscape.IsChecked == true)
                displaySize_Tablet_Orientation = 1;
            Properties.Settings.Default.DisplaySize_Tablet_Orientation = displaySize_Tablet_Orientation;

            // SAVE:
            Properties.Settings.Default.Save();
        }

        void LoadDisplaySize()
        {
            //-----------
            // Display size (Phone, Tablet, or Desktop)
            //-----------
            int displaySize = Properties.Settings.Default.DisplaySize;
            switch (displaySize)
            {
                case 0:
                    DisplaySize_Phone.IsChecked = true;
                    break;
                case 1:
                    DisplaySize_Tablet.IsChecked = true;
                    break;
                case 2:
                default:
                    DisplaySize_Desktop.IsChecked = true;
                    break;
            }

            //-----------
            // Phone orientation (Portrait or Landscape)
            //-----------
            int displaySize_Phone_Orientation = Properties.Settings.Default.DisplaySize_Phone_Orientation;
            switch (displaySize_Phone_Orientation)
            {
                case 1:
                    DisplaySize_Phone_Landscape.IsChecked = true;
                    break;
                case 0:
                default:
                    DisplaySize_Phone_Portrait.IsChecked = true;
                    break;
            }

            //-----------
            // Tablet orientation (Portrait or Landscape)
            //-----------
            int displaySize_Tablet_Orientation = Properties.Settings.Default.DisplaySize_Tablet_Orientation;
            switch (displaySize_Tablet_Orientation)
            {
                case 1:
                    DisplaySize_Tablet_Landscape.IsChecked = true;
                    break;
                case 0:
                default:
                    DisplaySize_Tablet_Portrait.IsChecked = true;
                    break;
            }
        }

        private class CustomResponseEventArgs : EventArgs
        {
            public string Url { get; private set; }

            public CustomResponseEventArgs(string url)
            {
                this.Url = url;
            }
        }
        private delegate void CustomResponseHandler(object sender, CustomResponseEventArgs e);

        #region Element Picker for XAML Inspection

        void StartElementPickerForInspection()
        {
            // Show the area that is used to detect MouseMove:
            //ElementPickerForInspection.Visibility = Visibility.Visible;

            if (ButtonViewHideElementPickerForInspector.IsChecked != true)
                ButtonViewHideElementPickerForInspector.IsChecked = true;

            // Show the tutorial:
            InformationAboutHowThePickerWorks.Visibility = Visibility.Visible;

            XamlInspectionHelper.StartInspection();
        }

        void StopElementPickerForInspection()
        {
            // Make sure the ToggleButton is in the correct state:
            if (ButtonViewHideElementPickerForInspector.IsChecked == true)
                ButtonViewHideElementPickerForInspector.IsChecked = false;

            // Hide the tutorial:
            InformationAboutHowThePickerWorks.Visibility = Visibility.Collapsed;

            XamlInspectionHelper.StopInspection();
        }

        private void ButtonViewHideElementPickerForInspector_Click(object sender, RoutedEventArgs e)
        {
            if (ButtonViewHideElementPickerForInspector.IsChecked == true)
                StartElementPickerForInspection();
            else
                StopElementPickerForInspection();
        }

        #endregion


        private bool IsNetworkAvailable()
        {
            return NetworkInterface.GetIsNetworkAvailable();
        }

        public static MainWindow Instance { get; set; }

        public static async void SaveHtmlSnapshot(string fileName = null, bool osRootOnly = true, string htmlElementId = null, string xamlElementName = null)
        {
            if (fileName == null)
            {
                var elementName = htmlElementId ?? xamlElementName ?? "";
                fileName = $"HtmlSnapshot-{elementName}-" + DateTime.Now.ToString("yy.MM.dd.hh.mm.ss") + ".html";
            }
            string simulatorExePath = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);

            string debuggingFolder = Path.Combine(simulatorExePath, "debugging");
            if (!Directory.Exists(debuggingFolder))
                Directory.CreateDirectory(debuggingFolder);

            File.WriteAllText(Path.Combine(debuggingFolder, fileName), await Instance.getHtmlSnapshot(osRootOnly, htmlElementId, xamlElementName));
        }
    }
}
